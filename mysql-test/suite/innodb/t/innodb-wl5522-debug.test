# Not supported in embedded
--source include/not_embedded.inc

# This test case needs to crash the server. Needs a debug server.
--source include/have_debug.inc

# Don't test this under valgrind, memory leaks will occur.
--source include/not_valgrind.inc

# Avoid CrashReporter popup on Mac
--source include/not_crashrep.inc

-- source include/have_innodb.inc

let MYSQLD_DATADIR =`SELECT @@datadir`;
let $innodb_file_per_table = `SELECT @@innodb_file_per_table`;

SET GLOBAL innodb_file_per_table = 1;
SELECT @@innodb_file_per_table;

DROP DATABASE IF EXISTS test_wl5522;
CREATE DATABASE test_wl5522;
CREATE TABLE test_wl5522.t1 (c1 INT) ENGINE = Innodb;
INSERT INTO test_wl5522.t1 VALUES (100), (200), (300);
SELECT COUNT(*) FROM test_wl5522.t1;
FLUSH TABLES test_wl5522.t1 WITH READ LOCK;

perl;
do 'include/innodb-util.inc';
ib_backup_tablespaces("test_wl5522", "t1");
EOF

UNLOCK TABLES;

DROP TABLE test_wl5522.t1;

CREATE TABLE test_wl5522.t1 (c1 INT) ENGINE = Innodb;

ALTER TABLE test_wl5522.t1 DISCARD TABLESPACE;

perl;
do 'include/innodb-util.inc';
ib_discard_tablespaces("test_wl5522", "t1");
EOF

--error ER_GET_ERRNO
SELECT COUNT(*) FROM test_wl5522.t1;

# Test failure after reset of space id and LSN in the tablespace
SET SESSION debug="+d,ib_import_reset_space_and_lsn_failure";

--replace_regex /'.*t1.cfg'/'t1.cfg'/

--error ER_INDEX_CORRUPT
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_reset_space_and_lsn_failure";

# Test failure after attempting a tablespace open
SET SESSION debug="+d,ib_import_open_tablespace_failure";

--replace_regex /'.*t1.ibd'/'t1.ibd'/

--error ER_FILE_NOT_FOUND
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

# Cleanup after the injected failure
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_open_tablespace_failure";

# Test failure after ibuf check
SET SESSION debug="+d,ib_import_check_bitmap_failure";


# Need proper mapping of error codes :-(
--error ER_NOT_KEYFILE
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

# Cleanup after the injected failure
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_check_bitmap_failure";

# Test failure after adjusting the cluster index root page
SET SESSION debug="+d,ib_import_cluster_root_adjust_failure";

--error ER_NOT_KEYFILE
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

# Cleanup after the injected failure
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_cluster_root_adjust_failure";

# Test failure after importing the cluster index
SET SESSION debug="+d,ib_import_cluster_failure";

--error ER_NOT_KEYFILE
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

# Cleanup after the injected failure
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_cluster_failure";

# Test failure after importing the secondary index(es)
SET SESSION debug="+d,ib_import_sec_root_adjust_failure";

--error ER_NOT_KEYFILE
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

# Cleanup after the injected failure
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_sec_root_adjust_failure";

# Test failure after importing the cluster index
SET SESSION debug="+d,ib_import_set_max_rowid_failure";

--error ER_NOT_KEYFILE
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

# Cleanup after the injected failure
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_set_max_rowid_failure";

# Test recovery if crash before transasction commit
SET SESSION debug="+d,ib_import_before_commit_crash";

# Write file to make mysql-test-run.pl start up the server again
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

--error ER_GET_ERRNO
SELECT * FROM test_wl5522.t1;

# Execute the statement that causes the crash
--error 2013
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

# Cleanup after recovery
perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

SET SESSION debug="-d,ib_import_before_commit_crash";

# Test recovery if crash after transasction commit
SET SESSION debug="+d,ib_import_after_commit_crash";

--error ER_GET_ERRNO
SELECT * FROM test_wl5522.t1;

# Write file to make mysql-test-run.pl start up the server again
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

# Execute the statement that causes the crash
--error 2013
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

SET SESSION debug="-d,ib_import_after_commit_crash";

SET GLOBAL innodb_file_per_table = 1;
SELECT @@innodb_file_per_table;

# Test recovery if crashed after checkpoint
SET SESSION debug="+d,ib_import_after_checkpoint_crash";

SELECT COUNT(*) FROM test_wl5522.t1;

ALTER TABLE test_wl5522.t1 DISCARD TABLESPACE;

perl;
do 'include/innodb-util.inc';
ib_discard_tablespaces("test_wl5522", "t1");
ib_restore_tablespaces("test_wl5522", "t1");
EOF

--error ER_GET_ERRNO
SELECT COUNT(*) FROM test_wl5522.t1;

# Write file to make mysql-test-run.pl start up the server again
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

# Execute the statement that causes the crash
--error 2013
ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

SET SESSION debug="-d,ib_import_after_checkpoint_crash";

SET GLOBAL innodb_file_per_table = 1;
SELECT @@innodb_file_per_table;

SELECT COUNT(*) FROM test_wl5522.t1;

ALTER TABLE test_wl5522.t1 DISCARD TABLESPACE;

perl;
do 'include/innodb-util.inc';
ib_discard_tablespaces("test_wl5522", "t1");
ib_restore_tablespaces("test_wl5522", "t1");
EOF

ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

SELECT COUNT(*) FROM test_wl5522.t1;

ALTER TABLE test_wl5522.t1 DISCARD TABLESPACE;

perl;
do 'include/innodb-util.inc';
ib_discard_tablespaces("test_wl5522", "t1");
ib_restore_tablespaces("test_wl5522", "t1");
EOF

--error ER_GET_ERRNO
SELECT COUNT(*) FROM test_wl5522.t1;

ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;

SELECT COUNT(*) FROM test_wl5522.t1;

INSERT INTO test_wl5522.t1 VALUES(400), (500), (600);

SELECT * FROM test_wl5522.t1;

DROP TABLE test_wl5522.t1;

--disable_query_log
# Enable metrics for the counters we are going to use
set global innodb_monitor_enable = purge_stop_count;
set global innodb_monitor_enable = purge_resume_count;
set global innodb_monitor_enable = ibuf_page_merges;
--enable_query_log

#
# Create a large table with delete marked records, disable purge during
# the update so that we can test the IMPORT purge code.
#
CREATE TABLE test_wl5522.t1 (
	c1 BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	c2 BIGINT,
	c3 VARCHAR(2048),
	c4 VARCHAR(2048),
	INDEX idx1(c2),
	INDEX idx2(c3(512)),
	INDEX idx3(c4(512))) Engine=InnoDB;

SET SESSION debug="+d,ib_buf_force_flush";
SET SESSION debug="+d,ib_ibuf_background_disable";

INSERT INTO test_wl5522.t1(c2, c3, c4) VALUES
	(1, REPEAT('a', 2048), REPEAT('a', 2048)),
	(2, REPEAT('b', 2048), REPEAT('b', 2048)),
	(3, REPEAT('c', 2048), REPEAT('c', 2048)),
	(4, REPEAT('d', 2048), REPEAT('d', 2048));

INSERT INTO test_wl5522.t1(c2, c3, c4) SELECT c2, c3, c4 FROM test_wl5522.t1;
INSERT INTO test_wl5522.t1(c2, c3, c4) SELECT c2, c3, c4 FROM test_wl5522.t1;
INSERT INTO test_wl5522.t1(c2, c3, c4) SELECT c2, c3, c4 FROM test_wl5522.t1;
INSERT INTO test_wl5522.t1(c2, c3, c4) SELECT c2, c3, c4 FROM test_wl5522.t1;
INSERT INTO test_wl5522.t1(c2, c3, c4) SELECT c2, c3, c4 FROM test_wl5522.t1;

# Stop purge so that it doesn't remove the delete marked entries.
SET GLOBAL INNODB_PURGE_STOP_NOW=ON;

DELETE FROM test_wl5522.t1 WHERE c2 = 1;

UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c2 = c2 + c1;
UPDATE test_wl5522.t1 SET c3 = REPEAT("c2", 1024);
UPDATE test_wl5522.t1 SET c4 = REPEAT("c4", 1024);

SHOW CREATE TABLE test_wl5522.t1;

SELECT c1, c2 FROM test_wl5522.t1;
SELECT COUNT(*) FROM test_wl5522.t1;
SELECT SUM(c2) FROM test_wl5522.t1;

FLUSH TABLES test_wl5522.t1 WITH READ LOCK;

perl;
do 'include/innodb-util.inc';
ib_backup_tablespaces("test_wl5522", "t1");
EOF

UNLOCK TABLES;

# Enable normal operation
SET GLOBAL INNODB_PURGE_RUN_NOW=ON;

DROP TABLE test_wl5522.t1;

CREATE TABLE test_wl5522.t1 (
	c1 BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	c2 BIGINT,
	c3 VARCHAR(2048),
	c4 VARCHAR(2048),
	INDEX idx1(c2),
	INDEX idx2(c3(512)),
	INDEX idx3(c4(512))) Engine=InnoDB;

SELECT c1, c2 FROM test_wl5522.t1;

ALTER TABLE test_wl5522.t1 DISCARD TABLESPACE;

perl;
do 'include/innodb-util.inc';
ib_restore_tablespaces("test_wl5522", "t1");
EOF

ALTER TABLE test_wl5522.t1 IMPORT TABLESPACE;
CHECK TABLE test_wl5522.t1;

SELECT c1,c2 FROM test_wl5522.t1;
SELECT COUNT(*) FROM test_wl5522.t1;
SELECT SUM(c2) FROM test_wl5522.t1;

SHOW CREATE TABLE test_wl5522.t1;

DROP TABLE test_wl5522.t1;

DROP DATABASE test_wl5522;

SELECT name, count 
  FROM information_schema.innodb_metrics
  WHERE name = 'ibuf_page_merges';

SET SESSION debug="-d,ib_buf_force_flush";
SET SESSION debug="-d,ib_ibuf_disable_background_merge";

--disable_query_log

set global innodb_monitor_disable = all;
set global innodb_monitor_reset_all = all;

-- disable_warnings
set global innodb_monitor_enable = default;
set global innodb_monitor_disable = default;
set global innodb_monitor_reset = default;
set global innodb_monitor_reset_all = default;
-- enable_warnings

call mtr.add_suppression("Got error -1 when reading table '.*'");
call mtr.add_suppression("InnoDB: Table '.*' tablespace is set as discarded.");
call mtr.add_suppression("InnoDB: Tablespace '.*' exists in the cache.*");
call mtr.add_suppression("InnoDB: Freeing existing tablespace '.*' entry from the cache with id.*");
call mtr.add_suppression("InnoDB: The table .* doesn't have a corresponding tablespace, it was discarded");

eval SET GLOBAL INNODB_FILE_PER_TABLE=$innodb_file_per_table;

