#
# WL#6469: Optimizing CREATE/DROP performance for temporary tables
#

--source include/have_innodb.inc

#########################################################################
#									#
# Will test following scenarios:					#
# 1. Create/Drop of temp-table. (with and w/o explicit pk)		#
# 2. Truncate temp-table (result in table drop and recreate).		#
# 3. Alter of temp-table.						#
# 4. Import/Discard of temp-table (to check blocked action)		#
# 5. Renaming of temp-table						#
# 6. Creating temp-table with large prefix enabled.			#
# 7. Temp table with PK-FK -FK constraint is igonered for temp tables   #
# 8. Check Temp table info not stored in I_S datafile and tables	#
# 9. Vary innodb_change_buffering value for temp-table 			#
#########################################################################


#-------------------------------------------------------------
#
# create test-bed.
#
let $per_table = `select @@innodb_file_per_table`;
let $format = `select @@innodb_file_format`;
let $change_buffer_value = `select @@global.innodb_change_buffering`;
set global innodb_file_per_table = 0;

#-------------------------------------------------------------
#
# 1. Create/Drop of temp-table. (with and w/o explicit pk)		#
#
create temporary table t1 (i int) engine = innodb;
select count(*) from information_schema.innodb_temp_table_info;
insert into t1 values (1), (2), (3), (4);
select * from t1;
select * from t1 where i = 4;
drop table t1;
#
# recreate table wih same name to ensure entries are removed.
create temporary table t1 (i int) engine = innodb;
select count(*) from information_schema.innodb_temp_table_info;
insert into t1 values (1), (2), (3), (4);
select * from t1;
select * from t1 where i = 4;
drop table t1;
#
create temporary table t2 (i int) engine = innodb;
insert into t2 values (1), (2), (3), (4);
select * from t2;
select * from t2 where i = 4;
select count(*) from information_schema.innodb_temp_table_info;
drop table t2;
#
create temporary table t1 (i int, primary key pk(i)) engine = innodb;
create temporary table t2 (i int, primary key pk(i)) engine = innodb;
create temporary table t3 (i int, primary key pk(i)) engine = innodb;
insert into t1 values (1), (2), (3), (4);
insert into t2 values (1), (2), (3), (4);
insert into t3 values (1), (2), (3), (4);
select * from t1;
select * from t1 where i = 4;
select count(*) from information_schema.innodb_temp_table_info;
drop table t1;
select count(*) from information_schema.innodb_temp_table_info;
drop table t2;
select count(*) from information_schema.innodb_temp_table_info;
drop table t3;

#-------------------------------------------------------------
#
# 2. Truncate temp-table (result in table drop and recreate).		#
#
create temporary table t1
	(keyc int, c1 char(100), c2 char(100),
	 primary key(keyc)) engine = innodb;
delimiter |;
create procedure populate_t1()
begin
	declare i int default 1;
	while (i <= 20000) DO
		insert into t1 values (i, 'a', 'b');
		set i = i + 1;
	end while;
end|
delimiter ;|
set autocommit=0;
select count(*) from t1;
CALL populate_t1();
select count(*) from t1;
select * from t1 limit 10;
set autocommit=1;
truncate table t1;
select count(*) from t1;
drop table t1;
#
# recreate table wih same name to ensure entries are removed.
create temporary table t1 (i int) engine = innodb;
insert into t1 values (1), (2), (3), (4);
select * from t1;
select * from t1 where i = 4;
drop table t1;
#
set global innodb_file_per_table = 1;
set global innodb_file_format = 'Barracuda';
create temporary table t1
	(keyc int, c1 char(100), c2 char(100),
	 primary key(keyc))
	engine = innodb key_block_size = 4 row_format = compressed;
begin;
select count(*) from t1;
call populate_t1();
select count(*) from t1;
rollback;
select count(*) from t1;
begin;
call populate_t1();
commit;
select count(*) from t1;
truncate table t1;
select count(*) from t1;
drop table t1;
#
drop procedure if exists populate_t1;
eval set global innodb_file_format = $format;
eval set global innodb_file_per_table = $per_table;


#-------------------------------------------------------------
#
# 3. Alter of temp-table.
#
create temporary table t1 (t1_i int, t1_f float) engine = innodb;
insert into t1 values (1, 1.1), (2, 2.2), (3, 2.2), (4, 4.4);
#
explain select * from t1 where t1_i = 1;
alter table t1 add unique index pri_index(t1_i);
explain select * from t1 where t1_i = 1;
select * from t1 where t1_i = 1;
#
--error ER_DUP_ENTRY
alter table t1 add unique index sec_index(t1_f);
alter table t1 add index sec_index(t1_f);
explain select * from t1 where t1_f > 2.2;
select * from t1 where t1_f > 2.2;
#
alter table t1 add column (t1_c char(10));
select * from t1;
insert into t1 values (5, 5.5, 'krunal');
#
alter table t1 drop column t1_f;
show create table t1;
--error ER_BAD_FIELD_ERROR
select * from t1 where t1_f > 2.2;
#
--error ER_ALTER_OPERATION_NOT_SUPPORTED
alter table t1 add index sec_index2(t1_c), algorithm=inplace;
select count(*) from information_schema.innodb_temp_table_info;
#
drop table t1;

#-------------------------------------------------------------
#
# 4. Import/Discard of temp-table (to check blocked action)
#
create temporary table t1 (i int, f float) engine = innodb;
insert into t1 values (10, 1.1), (20, 2.2);
select * from t1;
#
--error ER_CANNOT_DISCARD_TEMPORARY_TABLE
alter table t1 discard tablespace;
--error ER_CANNOT_DISCARD_TEMPORARY_TABLE
alter table t1 import tablespace;
drop table t1;

#-------------------------------------------------------------
#
# 5. Renaming of temp-table						#
#
create temporary table t1 (i int) engine=innodb;
insert into t1 values (1), (2), (3);
select * from t1;
#
alter table t1 rename t2;
--error ER_NO_SUCH_TABLE
select * from t1;
select * from t2;
insert into t2 values (1), (2), (6), (7);
select * from t2;
drop table t2;


#-------------------------------------------------------------
#
# 6. Creating temp-table with large prefix enabled.			#
#
use test;
let $large_prefix = `select @@innodb_large_prefix`;
#
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = dynamic engine=innodb;
drop table t;
#
set global innodb_file_per_table = 1;
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = dynamic engine=innodb;
drop table t;
#
set global innodb_file_format = 'barracuda';
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = dynamic engine=innodb;
drop table t;
#
set global innodb_large_prefix = 1;
#
--disable_warnings
--error ER_INDEX_COLUMN_TOO_LONG
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = compact engine=innodb;
#
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = dynamic engine=innodb;
drop table t;
#
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = compressed engine=innodb;
drop table t;
#
set global innodb_file_per_table = 0;
#
--error ER_INDEX_COLUMN_TOO_LONG
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = compact engine=innodb;
#
create temporary table t (
	a int not null,
	b blob not null, 
	index sk (b(3021))
	) row_format = dynamic engine=innodb;
drop table t;
--enable_warnings
eval set global innodb_large_prefix = $large_prefix;
#

#-------------------------------------------------------------
#
# 7. Temp table with PK-FK -FK constraint is igonered for temp
# tables
#
--disable_warnings
drop table if exists parent,child;
--enable_warnings
create temporary table parent ( i int primary key ) engine = innodb;
create table child ( j int references parent(i)) engine = innodb;
insert into parent values (1),(2),(3),(4);
insert into child values (1),(2),(3),(4);
# We can insert non referencing values as constraint is ignored for temp table
insert into child values (5),(6);
select * from parent ;
select * from child ;
--echo # restart server
--source include/restart_mysqld.inc
# parnet table will be removed on restart as its temp table
--error 1146
select * from parent ;
select * from child ;
drop table child;

#-------------------------------------------------------------
#
# 8. Temp table info not stored in I_S
#
--disable_warnings
DROP TABLE IF EXISTS t1,t2,t3;
--enable_warnings
CREATE TABLE t1 ( i INT ) ENGINE = Innodb;
CREATE TEMPORARY TABLE t2 ( i INT ) ENGINE = Innodb;
SELECT COUNT(*) FROM information_schema.INNODB_SYS_DATAFILES WHERE PATH LIKE '%test%t_';
SELECT COUNT(*) FROM information_schema.INNODB_SYS_TABLES WHERE NAME LIKE '%test%t_';
CREATE TEMPORARY table t3 ( i INT ) ENGINE = Innodb;
SELECT COUNT(*) FROM information_schema.INNODB_SYS_DATAFILES WHERE PATH LIKE '%test%t_';
SELECT COUNT(*) FROM information_schema.INNODB_SYS_TABLES WHERE NAME LIKE '%test%t_';
DROP TABLE t1,t2,t3;
SELECT COUNT(*) FROM information_schema.INNODB_SYS_DATAFILES WHERE PATH LIKE '%test%t_';
SELECT COUNT(*) FROM information_schema.INNODB_SYS_TABLES WHERE NAME LIKE '%test%t_';


#-------------------------------------------------------------
#
# 9. Vary innodb_change_buffering value
#
--disable_warnings
DROP TABLE IF EXISTS t1,t2;
--enable_warnings
select @@global.innodb_change_buffering;
create temporary table t1
        (keyc int, c1 char(100), c2 char(100),
         primary key(keyc)) engine = innodb;
create index idx on t1(keyc, c1(20));
delimiter |;
create procedure populate_t1()
begin
        declare i int default 1;
        while (i <= 20000) DO
                insert into t1 values (i, 'a', 'b');
                set i = i + 1;
        end while;
end|
delimiter ;|
set autocommit=0;
select count(*) from t1;
CALL populate_t1();
select count(*) from t1;
select * from t1 limit 10;
commit;
update t1 set keyc = -1 * keyc where keyc%50 = 0 ;
select count(*) from t1 where keyc < 0; 
drop table t1;
# check with non temp table
create table t1
        (keyc int, c1 char(100), c2 char(100),
         primary key(keyc)) engine = innodb;
create index idx on t1(keyc, c1(20));
set autocommit=0;
select count(*) from t1;
CALL populate_t1();
select count(*) from t1;
select * from t1 limit 10;
commit;
update t1 set keyc = -1 * keyc where keyc%50 = 0 ;
select count(*) from t1 where keyc < 0;
drop table t1;

# change innodb_change_buffering value to none
set @@global.innodb_change_buffering = none ;
select @@global.innodb_change_buffering;

create temporary table t1
        (keyc int, c1 char(100), c2 char(100),
         primary key(keyc)) engine = innodb;
create index idx on t1(keyc, c1(20));
set autocommit=0;
select count(*) from t1;
CALL populate_t1();
select count(*) from t1;
select * from t1 limit 10;
commit;
update t1 set keyc = -1 * keyc where keyc%50 = 0 ;
select count(*) from t1 where keyc < 0;
drop table t1;
# check with non temp table
create table t1
        (keyc int, c1 char(100), c2 char(100),
         primary key(keyc)) engine = innodb;
create index idx on t1(keyc, c1(20));
set autocommit=0;
select count(*) from t1;
CALL populate_t1();
select count(*) from t1;
select * from t1 limit 10;
commit;
update t1 set keyc = -1 * keyc where keyc%50 = 0 ;
select count(*) from t1 where keyc < 0;
drop table t1;
drop procedure if exists populate_t1;

#-------------------------------------------------------------
#
# remove test-bed.
#
eval set global innodb_file_format = $format;
eval set global innodb_file_per_table = $per_table;
eval set global innodb_change_buffering = $change_buffer_value;


