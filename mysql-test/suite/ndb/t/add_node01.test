-- source include/have_ndb.inc
-- source include/not_embedded.inc 
--result_format 2

## Make mtr.pl restart all servers after this test
call mtr.force_restart(); 

## Show cluster is started with one ndb_mgmd and two ndbd nodes
--replace_regex /mysql-[0-9]*.[0-9]*.[0-9]*/mysql/ /ndb-[0-9]*.[0-9]*.[0-9]*/ndb/ /localhost:[0-9]*/localhost/
--exec $NDB_MGM -e show

--disable_warnings
drop database if exists DB1;
--enable_warnings

CREATE LOGFILE GROUP lg_1
    ADD UNDOFILE 'undo_1.dat'
    INITIAL_SIZE 16M
    UNDO_BUFFER_SIZE 2M
    ENGINE NDB;

ALTER LOGFILE GROUP lg_1
    ADD UNDOFILE 'undo_2.dat'
    INITIAL_SIZE 12M
    ENGINE NDB;

CREATE TABLESPACE ts_1
    ADD DATAFILE 'data_1.dat'
    USE LOGFILE GROUP lg_1
    INITIAL_SIZE 32M
    ENGINE NDB;

CREATE TABLESPACE ts_2
    ADD DATAFILE 'data_2.dat'
    USE LOGFILE GROUP lg_1
    INITIAL_SIZE 32M
    ENGINE NDB;

create database DB1;
use DB1;
create table old_table1(id int NOT NULL PRIMARY KEY, data char(8)) engine=ndb;
create table old_table2(id int NOT NULL PRIMARY KEY, data char(8)) engine=ndb;
create table old_table3(id int NOT NULL PRIMARY KEY, data char(8))
TABLESPACE ts_1 STORAGE DISK
engine=ndb;
create table old_table4(id int NOT NULL PRIMARY KEY, data char(8))
TABLESPACE ts_2 STORAGE DISK
engine=ndb;

load data local infile 'suite/ndb/std_data/table_data10000.dat' into table old_table1 fields terminated by ' ' lines terminated by '\n';
load data local infile 'suite/ndb/std_data/table_data10000.dat' into table old_table2 fields terminated by ' ' lines terminated by '\n';
load data local infile 'suite/ndb/std_data/table_data10000.dat' into table old_table3 fields terminated by ' ' lines terminated by '\n';
load data local infile 'suite/ndb/std_data/table_data10000.dat' into table old_table4 fields terminated by ' ' lines terminated by '\n';

## Add two nodes to my.cnf
# Set ndb_mgmd with node id 3, otherwise the configuration will change and the
# cluster may fail to restart
--source suite/ndb/include/add_two_nodes.inc

## Reload ndb_mgmd
--source suite/ndb/include/reload_ndb_mgmd.inc
--exec $NDB_MGM -e show >> $NDB_TOOLS_OUTPUT

## Restart the "old" ndbd nodes
--exec $NDB_MGM -e "1 restart" >> $NDB_TOOLS_OUTPUT
--exec $NDB_WAITER --nowait-nodes=40,41 >> $NDB_TOOLS_OUTPUT
--exec $NDB_MGM -e "2 restart" >> $NDB_TOOLS_OUTPUT
--exec $NDB_WAITER --nowait-nodes=40,41 >> $NDB_TOOLS_OUTPUT

## Restart mysqld nodes
let $mysqld_name=mysqld.1.1;
--source include/restart_mysqld.inc
connect (mysqld_2_1,127.0.0.1,root,,test,$MASTER_MYPORT1,);
connection mysqld_2_1;
let $mysqld_name= mysqld.2.1;
--source include/restart_mysqld.inc
connection default;

## Initial start of "new" data nodes
--exec $NDB_NDBD --ndb-nodeid=40 >> $NDB_TOOLS_OUTPUT
--exec $NDB_NDBD --ndb-nodeid=41 >> $NDB_TOOLS_OUTPUT

## Wait for added nodes started
--exec $NDB_WAITER --timeout=300 >> $NDB_TOOLS_OUTPUT 

## Create nodegroup for "new" nodes
--exec $NDB_MGM -e "create nodegroup 40,41" >> $NDB_TOOLS_OUTPUT

# Cluster running after adding two ndbd nodes
--replace_regex /mysql-[0-9]*.[0-9]*.[0-9]*/mysql/ /ndb-[0-9]*.[0-9]*.[0-9]*/ndb/ /localhost:[0-9]*/localhost/
--exec $NDB_MGM -e show

use DB1;
create table new_table1(id int NOT NULL PRIMARY KEY, data char(8)) engine=ndb;
create table new_table2(id int NOT NULL PRIMARY KEY, data char(8))
TABLESPACE ts_1 STORAGE DISK
engine=ndb;
insert into new_table1(id, data) VALUES(1,'new'), (2,'new'),(3,'new'),(4,'new'),(5,'new'),(6,'new'),(7,'new'),(8,'new'),(9,'new'),(10,'new');
insert into new_table2(id, data) VALUES(1,'new'), (2,'new'),(3,'new'),(4,'new'),(5,'new'),(6,'new'),(7,'new'),(8,'new'),(9,'new'),(10,'new');

## ndb_mgm dump shows old data resides only on "old" nodes and new data resides on all nodes in cluster log 
--exec $NDB_MGM -e "all dump 18" >> $NDB_TOOLS_OUTPUT

alter online table old_table1 reorganize partition;
alter online table old_table2 reorganize partition;
alter online table old_table3 reorganize partition;
alter online table old_table4 reorganize partition;

select LOGFILE_GROUP_NAME,FILE_TYPE,EXTRA from INFORMATION_SCHEMA.FILES where FILE_NAME='undo_1.dat';
select LOGFILE_GROUP_NAME,FILE_TYPE,EXTRA from INFORMATION_SCHEMA.FILES where FILE_NAME='undo_2.dat';
select LOGFILE_GROUP_NAME,FILE_TYPE,TABLESPACE_NAME,EXTRA from INFORMATION_SCHEMA.FILES where FILE_NAME='data_1.dat';
select LOGFILE_GROUP_NAME,FILE_TYPE,TABLESPACE_NAME,EXTRA from INFORMATION_SCHEMA.FILES where FILE_NAME='data_2.dat';

## Drop nodegroup with "new" nodes is not allowed with data one those nodes
--error 255
--exec $NDB_MGM -e "drop nodegroup 1" >> $NDB_TOOLS_OUTPUT

## Nodegroup with "new" nodes still exist after dropping it as shown:
--replace_regex /mysql-[0-9]*.[0-9]*.[0-9]*/mysql/ /ndb-[0-9]*.[0-9]*.[0-9]*/ndb/ /localhost:[0-9]*/localhost/
--exec $NDB_MGM -e show

show databases;
drop table old_table1,old_table2,old_table3,old_table4,new_table1,new_table2;
drop database DB1;
show databases;

## Drop nodegroup with "new" nodes
--exec $NDB_MGM -e "drop nodegroup 1" >> $NDB_TOOLS_OUTPUT

## Nodegroup with "new" nodes still exists after dropping it as shown:
--replace_regex /mysql-[0-9]*.[0-9]*.[0-9]*/mysql/ /ndb-[0-9]*.[0-9]*.[0-9]*/ndb/ /localhost:[0-9]*/localhost/
--exec $NDB_MGM -e show

# Cleanup
ALTER TABLESPACE ts_1
    DROP DATAFILE 'data_1.dat'
    ENGINE NDB;

ALTER TABLESPACE ts_2
    DROP DATAFILE 'data_2.dat'
    ENGINE NDB;

drop TABLESPACE ts_1 ENGINE NDB;
drop TABLESPACE ts_2 ENGINE NDB;

drop LOGFILE GROUP lg_1 ENGINE NDB;
