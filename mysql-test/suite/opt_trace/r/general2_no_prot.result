set optimizer_trace_max_mem_size=1048576;
set optimizer_trace="enabled=on,end_marker=on";
# check that if a sub-statement should not be traced,
# it is not traced even if inside a traced top statement

set optimizer_trace_offset=0, optimizer_trace_limit=100;
create function f1(arg char(1)) returns int
begin
declare res int;
declare dummy varchar(1);
select 1 into res from dual;
select TRACE+NULL into dummy from information_schema.OPTIMIZER_TRACE limit 1;
select 2 into res from dual;
return 3;
end|
select f1("c")|
f1("c")
3

select * from information_schema.OPTIMIZER_TRACE|
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select f1("c")	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select `f1`('c') AS `f1(\"c\")`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
set res@1 NULL	{
  "steps": [
  ] /* steps */
}	0	0
set dummy@2 NULL	{
  "steps": [
  ] /* steps */
}	0	0
select 1 into res from dual	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select 1 AS `1`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
select 2 into res from dual	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select 2 AS `2`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
freturn 3 3	{
  "steps": [
  ] /* steps */
}	0	0
set optimizer_trace_offset=default, optimizer_trace_limit=default;
drop function f1;
# check that if a tracing gets disabled in a routine's  body,
# substatements are not traced

set optimizer_trace_offset=0, optimizer_trace_limit=100;
create function f1(arg char(1)) returns int
begin
declare res int;
declare dummy varchar(1);
set optimizer_trace="enabled=off";
select 1 into res from dual;
select TRACE+NULL into dummy from information_schema.OPTIMIZER_TRACE limit 1;
select 2 into res from dual;
return 3;
end|
select f1("c")|
f1("c")
3

select * from information_schema.OPTIMIZER_TRACE|
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select f1("c")	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select `f1`('c') AS `f1(\"c\")`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
set res@1 NULL	{
  "steps": [
  ] /* steps */
}	0	0
set dummy@2 NULL	{
  "steps": [
  ] /* steps */
}	0	0
set optimizer_trace_offset=default, optimizer_trace_limit=default;
select @@optimizer_trace;
@@optimizer_trace
enabled=off,end_marker=on,one_line=off
set optimizer_trace="enabled=on";
drop function f1;

# Check that if a sub-statement reads OPTIMIZER_TRACE,
# thus reading the unfinished trace of its caller statement,
# there is no crash.

create temporary table optt
(id int primary key auto_increment,
QUERY varchar(200),
TRACE text);
create table t1 (a int, key(a));
insert into t1 values(2);
set optimizer_trace_offset=0, optimizer_trace_limit=100;
create function f1(arg char(1)) returns int
begin
declare res int;
insert into optt select NULL, QUERY, TRACE from information_schema.OPTIMIZER_TRACE;
return 3;
end|
select * from t1 where a in (select f1("c") from t1)|
a

set optimizer_trace="enabled=off";
this should find unfinished traces
select count(*) from optt where TRACE NOT LIKE "%] /* steps */\n}";
count(*)
1
select count(*)<>0 from optt;
count(*)<>0
1
this should not
select count(*) from information_schema.OPTIMIZER_TRACE where TRACE NOT LIKE "%] /* steps */\n}";
count(*)
0
select count(*)<>0 from information_schema.OPTIMIZER_TRACE;
count(*)<>0
1
set optimizer_trace_offset=default, optimizer_trace_limit=default;
drop temporary table optt;
drop function f1;
drop table t1;
set optimizer_trace="enabled=on";

# check of crash with I_S.VIEWS (TABLE_LIST::alias==NULL)

create table t1(a int, b int);
create view v1 as select a from t1;
select VIEW_DEFINITION from information_schema.VIEWS
where TABLE_SCHEMA="test" and TABLE_NAME="v1";
VIEW_DEFINITION
select `test`.`t1`.`a` AS `a` from `test`.`t1`
select locate("\"view\": \"v1\"", TRACE) != 0
from information_schema.OPTIMIZER_TRACE;
locate("\"view\": \"v1\"", TRACE) != 0
1
drop table t1;
drop view v1;

# check for readable display of BIT values

create table t1 (a bit(5), key(a));
insert into t1 values(b'00000'),(b'01101');
select cast(a as unsigned) from t1 where a > b'01100';
cast(a as unsigned)
13
select TRACE from information_schema.OPTIMIZER_TRACE;
TRACE
{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select cast(`test`.`t1`.`a` as unsigned) AS `cast(a as unsigned)` from `test`.`t1` where (`test`.`t1`.`a` > 0x0c)"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "(`test`.`t1`.`a` > 0x0c)",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "(`test`.`t1`.`a` > 0x0c)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "(`test`.`t1`.`a` > 0x0c)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "(`test`.`t1`.`a` > 0x0c)"
                }
              ] /* steps */
            } /* condition_processing */
          },
          {
            "ref_optimizer_key_uses": [
            ] /* ref_optimizer_key_uses */
          },
          {
            "records_estimation": [
              {
                "database": "test",
                "table": "t1",
                "range_analysis": {
                  "table_scan": {
                    "records": 2,
                    "cost": 4.5034
                  } /* table_scan */,
                  "potential_range_indices": [
                    {
                      "index": "a",
                      "usable": true,
                      "key_parts": [
                        "a"
                      ] /* key_parts */
                    }
                  ] /* potential_range_indices */,
                  "best_covering_index_scan": {
                    "index": "a",
                    "cost": 1.4175,
                    "chosen": true
                  } /* best_covering_index_scan */,
                  "setup_range_conditions": [
                  ] /* setup_range_conditions */,
                  "group_index_range": {
                    "chosen": false,
                    "cause": "not_group_by_or_distinct"
                  } /* group_index_range */,
                  "analyzing_range_alternatives": {
                    "range_scan_alternatives": [
                      {
                        "index": "a",
                        "ranges": [
                          "12 < a"
                        ] /* ranges */,
                        "index_only": true,
                        "records": 2,
                        "cost": 3.41,
                        "rowid_ordered": false,
                        "chosen": false,
                        "cause": "cost"
                      }
                    ] /* range_scan_alternatives */,
                    "analyzing_roworder_intersect": {
                      "usable": false,
                      "cause": "too_few_roworder_scans"
                    } /* analyzing_roworder_intersect */
                  } /* analyzing_range_alternatives */
                } /* range_analysis */
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "test",
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 2,
                      "cost": 2.0034,
                      "chosen": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.4034,
                "records_for_plan": 2,
                "chosen": true
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "(`test`.`t1`.`a` > 0x0c)",
              "attached_conditions_computation": [
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "test",
                  "table": "t1",
                  "attached": "(`test`.`t1`.`a` > 0x0c)"
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "test",
                "table": "t1",
                "scan_type": "index"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}
drop table t1;

# check that trace lists all pushed down ON conditions

create table t1 (i int not null);
insert into t1 values (0),    (2),(3),(4);
create table t2 (i int not null);
insert into t2 values (0),(1),    (3),(4);
create table t3 (i int not null);
insert into t3 values (0),(1),(2),    (4);
select * from
t1 LEFT JOIN
( t2 LEFT JOIN
( t3 
)
ON t3.i = t2.i
)
ON t2.i = t1.i
WHERE t3.i IS NULL
;
i	i	i
3	3	NULL
2	NULL	NULL
select TRACE from information_schema.OPTIMIZER_TRACE;
TRACE
{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select `test`.`t1`.`i` AS `i`,`test`.`t2`.`i` AS `i`,`test`.`t3`.`i` AS `i` from (`test`.`t1` left join (`test`.`t2` left join `test`.`t3` on((`test`.`t3`.`i` = `test`.`t2`.`i`))) on((`test`.`t2`.`i` = `test`.`t1`.`i`))) where isnull(`test`.`t3`.`i`)"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "isnull(`test`.`t3`.`i`)",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "isnull(`test`.`t3`.`i`)"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "isnull(`test`.`t3`.`i`)"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "isnull(`test`.`t3`.`i`)"
                }
              ] /* steps */
            } /* condition_processing */
          },
          {
            "ref_optimizer_key_uses": [
            ] /* ref_optimizer_key_uses */
          },
          {
            "records_estimation": [
              {
                "database": "test",
                "table": "t1",
                "table_scan": {
                  "records": 4,
                  "cost": 2
                } /* table_scan */
              },
              {
                "database": "test",
                "table": "t2",
                "table_scan": {
                  "records": 4,
                  "cost": 2
                } /* table_scan */
              },
              {
                "database": "test",
                "table": "t3",
                "table_scan": {
                  "records": 4,
                  "cost": 2
                } /* table_scan */
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "test",
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 4,
                      "cost": 2.0068,
                      "chosen": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.8068,
                "records_for_plan": 4,
                "rest_of_plan": [
                  {
                    "database": "test",
                    "table": "t2",
                    "best_access_path": {
                      "considered_access_paths": [
                        {
                          "access_type": "scan",
                          "using_join_cache": true,
                          "records": 4,
                          "cost": 2.0071,
                          "chosen": true
                        }
                      ] /* considered_access_paths */
                    } /* best_access_path */,
                    "cost_for_plan": 8.0139,
                    "records_for_plan": 16,
                    "rest_of_plan": [
                      {
                        "database": "test",
                        "table": "t3",
                        "best_access_path": {
                          "considered_access_paths": [
                            {
                              "access_type": "scan",
                              "using_join_cache": true,
                              "records": 4,
                              "cost": 2.009,
                              "chosen": true
                            }
                          ] /* considered_access_paths */
                        } /* best_access_path */,
                        "cost_for_plan": 22.823,
                        "records_for_plan": 64,
                        "chosen": true
                      }
                    ] /* rest_of_plan */
                  }
                ] /* rest_of_plan */
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "isnull(`test`.`t3`.`i`)",
              "attached_conditions_computation": [
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "test",
                  "table": "t1",
                  "attached": null
                },
                {
                  "database": "test",
                  "table": "t2",
                  "attached": "trigcond_if(is_not_null_compl(t2..t3), (`test`.`t2`.`i` = `test`.`t1`.`i`), true)"
                },
                {
                  "database": "test",
                  "table": "t3",
                  "attached": "((trigcond_if(found_match(t3), trigcond_if(found_match(t2..t3), isnull(`test`.`t3`.`i`), true), true) and trigcond_if(is_not_null_compl(t3), (`test`.`t2`.`i` = `test`.`t1`.`i`), true)) and trigcond_if(is_not_null_compl(t3), (`test`.`t3`.`i` = `test`.`t1`.`i`), true))"
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "test",
                "table": "t1",
                "scan_type": "table"
              },
              {
                "database": "test",
                "table": "t2",
                "scan_type": "table"
              },
              {
                "database": "test",
                "table": "t3",
                "scan_type": "table"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}
drop table t1,t2,t3;

# test of tracing a query with an HAVING condition, in
# ps-protocol, does not crash

CREATE TABLE t1 (f1 INT, f2 VARCHAR(1));
INSERT INTO t1 VALUES (16,'f');
INSERT INTO t1 VALUES (16,'f');
CREATE TABLE t2 (f1 INT, f2 VARCHAR(1));
INSERT INTO t2 VALUES (13,'f');
INSERT INTO t2 VALUES (20,'f');
CREATE TABLE t3 (f1 INT, f2 VARCHAR(1));
INSERT INTO t3 VALUES (7,'f');
SELECT t1.f2 FROM t1
STRAIGHT_JOIN (t2 JOIN t3 ON t3.f2  = t2.f2  ) ON t3 .f2  = t2 .f2
HAVING ('v', 'i') NOT IN (SELECT f2, MIN(f2) FROM t1)
ORDER BY f2;
f2
f
f
f
f
select TRACE from information_schema.OPTIMIZER_TRACE;
TRACE
{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "join_preparation": {
              "select#": 2,
              "steps": [
                {
                  "expanded_query": "/* select#2 */ select `test`.`t1`.`f2`,min(`test`.`t1`.`f2`) from `test`.`t1`"
                },
                {
                  "transformation": {
                    "select#": 2,
                    "from": "IN (SELECT)",
                    "to": "semijoin",
                    "chosen": false
                  } /* transformation */
                },
                {
                  "transformation": {
                    "select#": 2,
                    "from": "IN (SELECT)",
                    "to": "materialization",
                    "chosen": false
                  } /* transformation */
                },
                {
                  "transformation": {
                    "select#": 2,
                    "from": "IN (SELECT)",
                    "to": "EXISTS (CORRELATED SELECT)",
                    "chosen": true,
                    "evaluating_constant_having_conditions": [
                    ] /* evaluating_constant_having_conditions */
                  } /* transformation */
                }
              ] /* steps */
            } /* join_preparation */
          },
          {
            "expanded_query": "/* select#1 */ select `test`.`t1`.`f2` AS `f2` from (`test`.`t1` straight_join (`test`.`t2` join `test`.`t3` on((`test`.`t3`.`f2` = `test`.`t2`.`f2`))) on((`test`.`t3`.`f2` = `test`.`t2`.`f2`))) having (not(<in_optimizer>(('v','i'),<exists>(/* select#2 */ select `test`.`t1`.`f2`,min(`test`.`t1`.`f2`) from `test`.`t1` having (((<cache>('v') = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>('i') = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`))))))) order by `test`.`t1`.`f2`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
          {
            "condition_processing": {
              "condition": "WHERE",
              "original_condition": "((`test`.`t3`.`f2` = `test`.`t2`.`f2`) and (`test`.`t3`.`f2` = `test`.`t2`.`f2`))",
              "steps": [
                {
                  "transformation": "equality_propagation",
                  "resulting_condition": "(multiple equal(`test`.`t3`.`f2`, `test`.`t2`.`f2`))"
                },
                {
                  "transformation": "constant_propagation",
                  "resulting_condition": "(multiple equal(`test`.`t3`.`f2`, `test`.`t2`.`f2`))"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "resulting_condition": "multiple equal(`test`.`t3`.`f2`, `test`.`t2`.`f2`)"
                }
              ] /* steps */
            } /* condition_processing */
          },
          {
            "condition_processing": {
              "condition": "HAVING",
              "original_condition": "(not(<in_optimizer>(('v','i'),<exists>(/* select#2 */ select `test`.`t1`.`f2`,min(`test`.`t1`.`f2`) from `test`.`t1` having (((<cache>('v') = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>('i') = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`)))))))",
              "steps": [
                {
                  "transformation": "constant_propagation",
                  "subselect_constant_propagation": [
                  ] /* subselect_constant_propagation */,
                  "resulting_condition": "(not(<in_optimizer>(('v','i'),<exists>(/* select#2 */ select `test`.`t1`.`f2`,min(`test`.`t1`.`f2`) from `test`.`t1` having (((<cache>('v') = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>('i') = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`)))))))"
                },
                {
                  "transformation": "trivial_condition_removal",
                  "subselect_cond_removal": [
                  ] /* subselect_cond_removal */,
                  "resulting_condition": "(not(<in_optimizer>(('v','i'),<exists>(/* select#2 */ select `test`.`t1`.`f2`,min(`test`.`t1`.`f2`) from `test`.`t1` having (((<cache>('v') = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>('i') = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`)))))))"
                }
              ] /* steps */
            } /* condition_processing */
          },
          {
            "ref_optimizer_key_uses": [
            ] /* ref_optimizer_key_uses */
          },
          {
            "records_estimation": [
              {
                "database": "test",
                "table": "t1",
                "table_scan": {
                  "records": 2,
                  "cost": 2
                } /* table_scan */
              },
              {
                "database": "test",
                "table": "t2",
                "table_scan": {
                  "records": 2,
                  "cost": 2
                } /* table_scan */
              },
              {
                "database": "test",
                "table": "t3",
                "records": 1,
                "cost": 1,
                "table_type": "system"
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "test",
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 2,
                      "cost": 2.0098,
                      "chosen": true,
                      "use_temp_table": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.4098,
                "records_for_plan": 2,
                "rest_of_plan": [
                  {
                    "database": "test",
                    "table": "t2",
                    "best_access_path": {
                      "considered_access_paths": [
                        {
                          "access_type": "scan",
                          "using_join_cache": true,
                          "records": 2,
                          "cost": 2.0099,
                          "chosen": true
                        }
                      ] /* considered_access_paths */
                    } /* best_access_path */,
                    "cost_for_plan": 5.2196,
                    "records_for_plan": 4,
                    "chosen": true
                  }
                ] /* rest_of_plan */
              },
              {
                "database": "test",
                "table": "t2",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 2,
                      "cost": 2.0098,
                      "chosen": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.4098,
                "records_for_plan": 2,
                "pruned_by_heuristic": true
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "(`test`.`t2`.`f2` = 'f')",
              "attached_conditions_computation": [
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "test",
                  "table": "t1",
                  "attached": null
                },
                {
                  "database": "test",
                  "table": "t2",
                  "attached": "(`test`.`t2`.`f2` = 'f')"
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "test",
                "table": "t1",
                "scan_type": "table"
              },
              {
                "database": "test",
                "table": "t2",
                "scan_type": "table"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
          {
            "subselect_execution": {
              "select#": 2,
              "steps": [
                {
                  "join_optimization": {
                    "select#": 2,
                    "steps": [
                      {
                        "condition_processing": {
                          "condition": "HAVING",
                          "original_condition": "(((<cache>(<cache>('v')) = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>(<cache>('i')) = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`)))",
                          "steps": [
                            {
                              "transformation": "constant_propagation",
                              "resulting_condition": "(((<cache>(<cache>('v')) = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>(<cache>('i')) = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`)))"
                            },
                            {
                              "transformation": "trivial_condition_removal",
                              "resulting_condition": "(((<cache>(<cache>('v')) = `test`.`t1`.`f2`) or isnull(`test`.`t1`.`f2`)) and ((<cache>(<cache>('i')) = min(`test`.`t1`.`f2`)) or isnull(min(`test`.`t1`.`f2`))) and <is_not_null_test>(`test`.`t1`.`f2`) and <is_not_null_test>(min(`test`.`t1`.`f2`)))"
                            }
                          ] /* steps */
                        } /* condition_processing */
                      },
                      {
                        "records_estimation": [
                          {
                            "database": "test",
                            "table": "t1",
                            "table_scan": {
                              "records": 2,
                              "cost": 2
                            } /* table_scan */
                          }
                        ] /* records_estimation */
                      },
                      {
                        "considered_execution_plans": [
                          {
                            "database": "test",
                            "table": "t1",
                            "best_access_path": {
                              "considered_access_paths": [
                                {
                                  "access_type": "scan",
                                  "records": 2,
                                  "cost": 2.0098,
                                  "chosen": true
                                }
                              ] /* considered_access_paths */
                            } /* best_access_path */,
                            "cost_for_plan": 2.4098,
                            "records_for_plan": 2,
                            "chosen": true
                          }
                        ] /* considered_execution_plans */
                      },
                      {
                        "attaching_conditions_to_tables": {
                          "original_condition": null,
                          "attached_conditions_computation": [
                          ] /* attached_conditions_computation */,
                          "attached_conditions_summary": [
                            {
                              "database": "test",
                              "table": "t1",
                              "attached": null
                            }
                          ] /* attached_conditions_summary */
                        } /* attaching_conditions_to_tables */
                      },
                      {
                        "refine_plan": [
                          {
                            "database": "test",
                            "table": "t1",
                            "scan_type": "table"
                          }
                        ] /* refine_plan */
                      }
                    ] /* steps */
                  } /* join_optimization */
                },
                {
                  "join_execution": {
                    "select#": 2,
                    "steps": [
                    ] /* steps */
                  } /* join_execution */
                }
              ] /* steps */
            } /* subselect_execution */
          },
          {
            "subselect_execution": {
              "select#": 2,
              "steps": [
                {
                  "join_execution": {
                    "select#": 2,
                    "steps": [
                    ] /* steps */
                  } /* join_execution */
                }
              ] /* steps */
            } /* subselect_execution */
          },
          {
            "subselect_execution": {
              "select#": 2,
              "steps": [
                {
                  "join_execution": {
                    "select#": 2,
                    "steps": [
                    ] /* steps */
                  } /* join_execution */
                }
              ] /* steps */
            } /* subselect_execution */
          },
          {
            "subselect_execution": {
              "select#": 2,
              "steps": [
                {
                  "join_execution": {
                    "select#": 2,
                    "steps": [
                    ] /* steps */
                  } /* join_execution */
                }
              ] /* steps */
            } /* subselect_execution */
          }
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}
DROP TABLES t1,t2,t3;

# Test that tracing a query with a materialized FROM-clause
# derived table using a GROUP BY, does not crash

create table t1 (a int, b int);
insert into t1 values (1,1), (2,null), (3, 4);
select max(x) from (select sum(a) as x from t1 group by b) as teeone;
max(x)
3
select TRACE from information_schema.OPTIMIZER_TRACE;
TRACE
{
  "steps": [
    {
      "join_preparation": {
        "select#": 2,
        "steps": [
          {
            "expanded_query": "/* select#2 */ select sum(`test`.`t1`.`a`) AS `x` from `test`.`t1` group by `test`.`t1`.`b`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 2,
        "steps": [
          {
            "records_estimation": [
              {
                "database": "test",
                "table": "t1",
                "table_scan": {
                  "records": 3,
                  "cost": 2
                } /* table_scan */
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "test",
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 3,
                      "cost": 2.0066,
                      "chosen": true,
                      "use_temp_table": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.6066,
                "records_for_plan": 3,
                "chosen": true
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": null,
              "attached_conditions_computation": [
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "test",
                  "table": "t1",
                  "attached": null
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "test",
                "table": "t1",
                "scan_type": "table"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 2,
        "steps": [
        ] /* steps */
      } /* join_execution */
    },
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select max(`teeone`.`x`) AS `max(x)` from (/* select#2 */ select sum(`test`.`t1`.`a`) AS `x` from `test`.`t1` group by `test`.`t1`.`b`) `teeone`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
          {
            "records_estimation": [
              {
                "database": "",
                "table": "teeone",
                "table_scan": {
                  "records": 3,
                  "cost": 10
                } /* table_scan */
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "",
                "table": "teeone",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 3,
                      "cost": 10.15,
                      "chosen": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 10.75,
                "records_for_plan": 3,
                "chosen": true
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": null,
              "attached_conditions_computation": [
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "",
                  "table": "teeone",
                  "attached": null
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "",
                "table": "teeone",
                "scan_type": "table"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}
drop table t1;

# To have no crash above, we had to restore the ref_array at
# end of JOIN::exec(). This impacts how the query looks like,
# but not too much, as seen in the error message below.
# Comes from func_gconcat.test.

CREATE TABLE t1(f1 int);
INSERT INTO t1 values (0),(0);
set optimizer_trace="enabled=off";
SELECT POLYGON((SELECT 1 FROM (SELECT 1 IN (GROUP_CONCAT(t1.f1)) FROM t1, t1 t GROUP BY t.f1 ) d));
ERROR 22007: Illegal non geometric '(select 1 from (select (1 = group_concat(`test`.`t1`.`f1` separator ',')) AS `1 IN (GROUP_CONCAT(t1.f1))` from `test`.`t1` join `test`.`t1` `t` group by `t`.`f1`) `d`)' value found during parsing
set optimizer_trace="enabled=on";
SELECT POLYGON((SELECT 1 FROM (SELECT 1 IN (GROUP_CONCAT(t1.f1)) FROM t1, t1 t GROUP BY t.f1 ) d));
ERROR 22007: Illegal non geometric '(select 1 from (select (1 = group_concat(`test`.`t1`.`f1` separator ',')) AS `1 IN (GROUP_CONCAT(t1.f1))` from `test`.`t1` join `test`.`t1` `t` group by `test`.`t`.`f1`) `d`)' value found during parsing
DROP TABLE t1;

# Check that SQL PREPARE and SQL EXECUTE each produce one trace.

set optimizer_trace_offset=0, optimizer_trace_limit=100;
prepare stmt from "select 1";
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select 1	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select 1 AS `1`"
          }
        ] /* steps */
      } /* join_preparation */
    }
  ] /* steps */
}	0	0
set optimizer_trace_offset=0, optimizer_trace_limit=100;
execute stmt;
1
1
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select 1	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select 1 AS `1`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
deallocate prepare stmt;
set optimizer_trace_offset=default, optimizer_trace_limit=default;

# Test of SELECTs in IF in stored routine.
# Same test for CASE WHEN.

create table t1 (a int);
create procedure p1()
begin
if exists(select 1) then
insert into t1 values(1);
end if;
if exists(select 2) then
insert into t1 values(2);
end if;
if (select count(*) from t1) then
insert into t1 values(3);
end if;
set @a=(select count(a) from t1 where a>0);
case (select count(a) from t1 where a>1)
when 2 then set @b=2;
else set @b=3;
end case;
end|
set optimizer_trace_offset=0, optimizer_trace_limit=100;
set @old_max=@@optimizer_trace_max_mem_size;
set optimizer_trace_max_mem_size=40000;
call p1();
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
set @old_max=@@optimizer_trace_max_mem_size	{
  "steps": [
  ] /* steps */
}	0	0
set optimizer_trace_max_mem_size=40000	{
  "steps": [
  ] /* steps */
}	0	0
call p1()	{
  "steps": [
  ] /* steps */
}	0	0
jump_if_not 2(2) exists(select 1)	{
  "steps": [
    {
      "join_preparation": {
        "select#": 2,
        "steps": [
          {
            "expanded_query": "/* select#2 */ select 1"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 2,
        "steps": [
          {
            "join_optimization": {
              "select#": 2,
              "steps": [
              ] /* steps */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 2,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
insert into t1 values(1)	{
  "steps": [
  ] /* steps */
}	0	0
jump_if_not 4(4) exists(select 2)	{
  "steps": [
    {
      "join_preparation": {
        "select#": 3,
        "steps": [
          {
            "expanded_query": "/* select#3 */ select 2"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 3,
        "steps": [
          {
            "join_optimization": {
              "select#": 3,
              "steps": [
              ] /* steps */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 3,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
insert into t1 values(2)	{
  "steps": [
  ] /* steps */
}	0	0
jump_if_not 6(6) (select count(0) from `test`.`t1`)	{
  "steps": [
    {
      "join_preparation": {
        "select#": 4,
        "steps": [
          {
            "expanded_query": "/* select#4 */ select count(0) from `test`.`t1`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 4,
        "steps": [
          {
            "join_optimization": {
              "select#": 4,
              "steps": [
              ] /* steps */,
              "empty_result": {
                "cause": "Select tables optimized away"
              } /* empty_result */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 4,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
insert into t1 values(3)	{
  "steps": [
  ] /* steps */
}	0	0
SET @a=(select count(a) from t1 where a>0)	{
  "steps": [
    {
      "join_preparation": {
        "select#": 5,
        "steps": [
          {
            "expanded_query": "/* select#5 */ select count(`test`.`t1`.`a`) from `test`.`t1` where (`test`.`t1`.`a` > 0)"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 5,
        "steps": [
          {
            "join_optimization": {
              "select#": 5,
              "steps": [
                {
                  "condition_processing": {
                    "condition": "WHERE",
                    "original_condition": "(`test`.`t1`.`a` > 0)",
                    "steps": [
                      {
                        "transformation": "equality_propagation",
                        "resulting_condition": "(`test`.`t1`.`a` > 0)"
                      },
                      {
                        "transformation": "constant_propagation",
                        "resulting_condition": "(`test`.`t1`.`a` > 0)"
                      },
                      {
                        "transformation": "trivial_condition_removal",
                        "resulting_condition": "(`test`.`t1`.`a` > 0)"
                      }
                    ] /* steps */
                  } /* condition_processing */
                },
                {
                  "ref_optimizer_key_uses": [
                  ] /* ref_optimizer_key_uses */
                },
                {
                  "records_estimation": [
                    {
                      "database": "test",
                      "table": "t1",
                      "table_scan": {
                        "records": 3,
                        "cost": 2
                      } /* table_scan */
                    }
                  ] /* records_estimation */
                },
                {
                  "considered_execution_plans": [
                    {
                      "database": "test",
                      "table": "t1",
                      "best_access_path": {
                        "considered_access_paths": [
                          {
                            "access_type": "scan",
                            "records": 3,
                            "cost": 2.0051,
                            "chosen": true
                          }
                        ] /* considered_access_paths */
                      } /* best_access_path */,
                      "cost_for_plan": 2.6051,
                      "records_for_plan": 3,
                      "chosen": true
                    }
                  ] /* considered_execution_plans */
                },
                {
                  "attaching_conditions_to_tables": {
                    "original_condition": "(`test`.`t1`.`a` > 0)",
                    "attached_conditions_computation": [
                    ] /* attached_conditions_computation */,
                    "attached_conditions_summary": [
                      {
                        "database": "test",
                        "table": "t1",
                        "attached": "(`test`.`t1`.`a` > 0)"
                      }
                    ] /* attached_conditions_summary */
                  } /* attaching_conditions_to_tables */
                },
                {
                  "refine_plan": [
                    {
                      "database": "test",
                      "table": "t1",
                      "scan_type": "table"
                    }
                  ] /* refine_plan */
                }
              ] /* steps */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 5,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
set_case_expr (15) 0 (select count(`a`) from `test`.`t1` where (`a` > 1))	{
  "steps": [
    {
      "join_preparation": {
        "select#": 6,
        "steps": [
          {
            "expanded_query": "/* select#6 */ select count(`test`.`t1`.`a`) from `test`.`t1` where (`test`.`t1`.`a` > 1)"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 6,
        "steps": [
          {
            "join_optimization": {
              "select#": 6,
              "steps": [
                {
                  "condition_processing": {
                    "condition": "WHERE",
                    "original_condition": "(`test`.`t1`.`a` > 1)",
                    "steps": [
                      {
                        "transformation": "equality_propagation",
                        "resulting_condition": "(`test`.`t1`.`a` > 1)"
                      },
                      {
                        "transformation": "constant_propagation",
                        "resulting_condition": "(`test`.`t1`.`a` > 1)"
                      },
                      {
                        "transformation": "trivial_condition_removal",
                        "resulting_condition": "(`test`.`t1`.`a` > 1)"
                      }
                    ] /* steps */
                  } /* condition_processing */
                },
                {
                  "ref_optimizer_key_uses": [
                  ] /* ref_optimizer_key_uses */
                },
                {
                  "records_estimation": [
                    {
                      "database": "test",
                      "table": "t1",
                      "table_scan": {
                        "records": 3,
                        "cost": 2
                      } /* table_scan */
                    }
                  ] /* records_estimation */
                },
                {
                  "considered_execution_plans": [
                    {
                      "database": "test",
                      "table": "t1",
                      "best_access_path": {
                        "considered_access_paths": [
                          {
                            "access_type": "scan",
                            "records": 3,
                            "cost": 2.0051,
                            "chosen": true
                          }
                        ] /* considered_access_paths */
                      } /* best_access_path */,
                      "cost_for_plan": 2.6051,
                      "records_for_plan": 3,
                      "chosen": true
                    }
                  ] /* considered_execution_plans */
                },
                {
                  "attaching_conditions_to_tables": {
                    "original_condition": "(`test`.`t1`.`a` > 1)",
                    "attached_conditions_computation": [
                    ] /* attached_conditions_computation */,
                    "attached_conditions_summary": [
                      {
                        "database": "test",
                        "table": "t1",
                        "attached": "(`test`.`t1`.`a` > 1)"
                      }
                    ] /* attached_conditions_summary */
                  } /* attaching_conditions_to_tables */
                },
                {
                  "refine_plan": [
                    {
                      "database": "test",
                      "table": "t1",
                      "scan_type": "table"
                    }
                  ] /* refine_plan */
                }
              ] /* steps */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 6,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
jump_if_not 11(15) (case_expr@0 = 2)	{
  "steps": [
  ] /* steps */
}	0	0
SET @b=2	{
  "steps": [
  ] /* steps */
}	0	0
select * from t1;
a
1
2
3
select @a,@b;
@a	@b
3	2
set optimizer_trace_max_mem_size=@old_max;
drop procedure p1;
drop table t1;

# Test of tracing of DO.

set optimizer_trace_offset=0, optimizer_trace_limit=100;
do (select 42);
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
do (select 42)	{
  "steps": [
    {
      "join_preparation": {
        "select#": 2,
        "steps": [
          {
            "expanded_query": "/* select#2 */ select 42"
          }
        ] /* steps */
      } /* join_preparation */
    }
  ] /* steps */
}	0	0

# Test of tracing of subquery used in parameter of routine call

create table t1(a int);
insert into t1 values(1),(2);
create procedure p1(x int)
begin
declare b int;
set b=(select 2+x from dual);
end|
set optimizer_trace_offset=0, optimizer_trace_limit=100;
call p1((select a from t1 limit 1));
select * from information_schema.OPTIMIZER_TRACE;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
call p1((select a from t1 limit 1))	{
  "steps": [
    {
      "join_preparation": {
        "select#": 2,
        "steps": [
          {
            "expanded_query": "/* select#2 */ select `test`.`t1`.`a` from `test`.`t1` limit 1"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 2,
        "steps": [
          {
            "join_optimization": {
              "select#": 2,
              "steps": [
                {
                  "records_estimation": [
                    {
                      "database": "test",
                      "table": "t1",
                      "table_scan": {
                        "records": 2,
                        "cost": 2
                      } /* table_scan */
                    }
                  ] /* records_estimation */
                },
                {
                  "considered_execution_plans": [
                    {
                      "database": "test",
                      "table": "t1",
                      "best_access_path": {
                        "considered_access_paths": [
                          {
                            "access_type": "scan",
                            "records": 2,
                            "cost": 2.0034,
                            "chosen": true
                          }
                        ] /* considered_access_paths */
                      } /* best_access_path */,
                      "cost_for_plan": 2.4034,
                      "records_for_plan": 2,
                      "chosen": true
                    }
                  ] /* considered_execution_plans */
                },
                {
                  "attaching_conditions_to_tables": {
                    "original_condition": null,
                    "attached_conditions_computation": [
                    ] /* attached_conditions_computation */,
                    "attached_conditions_summary": [
                      {
                        "database": "test",
                        "table": "t1",
                        "attached": null
                      }
                    ] /* attached_conditions_summary */
                  } /* attaching_conditions_to_tables */
                },
                {
                  "refine_plan": [
                    {
                      "database": "test",
                      "table": "t1",
                      "scan_type": "table"
                    }
                  ] /* refine_plan */
                }
              ] /* steps */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 2,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
set b@1 NULL	{
  "steps": [
  ] /* steps */
}	0	0
set b@1 (select (2 + x@0))	{
  "steps": [
    {
      "join_preparation": {
        "select#": 3,
        "steps": [
          {
            "expanded_query": "/* select#3 */ select (2 + x@0)"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "subselect_execution": {
        "select#": 3,
        "steps": [
          {
            "join_optimization": {
              "select#": 3,
              "steps": [
              ] /* steps */
            } /* join_optimization */
          },
          {
            "join_execution": {
              "select#": 3,
              "steps": [
              ] /* steps */
            } /* join_execution */
          }
        ] /* steps */
      } /* subselect_execution */
    }
  ] /* steps */
}	0	0
drop procedure p1;
drop table t1;
set optimizer_trace_offset=default, optimizer_trace_limit=default;

# Test that printing expanded query does not alter query's
# results.
# Comes from ctype_utf8mb4_heap.test

create table t1 (f1 varchar(1) not null) default charset utf8mb4;
insert into t1 values (''), ('');
select concat(concat(_latin1'->',f1),_latin1'<-') from t1;
concat(concat(_latin1'->',f1),_latin1'<-')
-><-
-><-
select * from information_schema.optimizer_trace;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
select concat(concat(_latin1'->',f1),_latin1'<-') from t1	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select concat(concat('->',`test`.`t1`.`f1`),'<-') AS `concat(concat(_latin1'->',f1),_latin1'<-')` from `test`.`t1`"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
          {
            "records_estimation": [
              {
                "database": "test",
                "table": "t1",
                "table_scan": {
                  "records": 2,
                  "cost": 2
                } /* table_scan */
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "test",
                "table": "t1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 2,
                      "cost": 2.0098,
                      "chosen": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.4098,
                "records_for_plan": 2,
                "chosen": true
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": null,
              "attached_conditions_computation": [
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "test",
                  "table": "t1",
                  "attached": null
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "test",
                "table": "t1",
                "scan_type": "table"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
drop table t1;

# Bug#12546331 - SEGFAULT IN SUBSELECT_INDEXSUBQUERY_ENGINE::PRINT WITH OPTIMIZER TRACE

CREATE TABLE t1 (  
col_int_nokey INT,  
col_int_key INT,  
col_varchar_key varchar(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t1 VALUES
(NULL,8,'x'),
(8,7,'d'),
(1,1,'r'),
(9,7,'f'),
(4,9,'y'),
(3,NULL,'u'),
(2,1,'m'),
(NULL,9,NULL),
(2,2,'o'),
(NULL,9,'w'),
(6,2,'m'),
(7,4,'q'),
(2,0,NULL),
(5,4,'d'),
(7,8,'g'),
(6,NULL,'x'),
(6,NULL,'f'),
(2,0,'p'),
(9,NULL,'j'),
(6,8,'c')
;
CREATE TABLE t2 (
col_int_nokey INT,
col_int_key INT,
col_varchar_key varchar(1),
KEY col_int_key (col_int_key),
KEY col_varchar_key (col_varchar_key,col_int_key)
);
INSERT INTO t2 VALUES
(2,4,'v'),
(150,62,'v'),
(NULL,7,'c'),
(2,1,NULL),
(5,0,'x'),
(3,7,'i'),
(1,7,'e'),
(4,1,'p'),
(NULL,7,'s'),
(2,1,'j'),
(6,5,'z'),
(6,2,'c'),
(8,0,'a'),
(2,1,'q'),
(6,8,'y'),
(8,1,NULL),
(3,1,'r'),
(3,9,'v'),
(9,1,NULL),
(6,5,'r')
;
SELECT col_int_nokey
FROM (
SELECT *
FROM t2
WHERE col_varchar_key > 'a'
    OR ( 7 , 5 ) NOT IN (
SELECT col_int_nokey , col_int_key
FROM t1 )
) AS alias1;
col_int_nokey
2
150
NULL
2
5
3
1
4
NULL
2
6
6
8
2
6
8
3
3
9
6
DROP TABLE t1;
DROP TABLE t2;

BUG#12552262 - INVALID JSON WITH TWO CALLS TO TEST_QUICK_SELECT

CREATE TABLE t1 (
col_varchar_10_latin1_key varchar(10) DEFAULT NULL,
col_int_key INT,
KEY col_int_key (col_int_key)
);
CREATE TABLE t2 (
col_varchar_10_latin1_key varchar(10) DEFAULT NULL,
col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8 DEFAULT NULL,
col_int_key INT,
KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key),
KEY col_int_key (col_int_key)
);
INSERT INTO t2 VALUES ('qykbaqfyhz','l',NULL);
CREATE TABLE t3 (
col_int_key INT,
col_varchar_10_utf8_key varchar(10) CHARACTER SET utf8 DEFAULT NULL,
col_varchar_10_latin1_key varchar(10) DEFAULT NULL,
KEY col_varchar_10_utf8_key (col_varchar_10_utf8_key),
KEY col_varchar_10_latin1_key (col_varchar_10_latin1_key)
);
INSERT INTO t3 VALUES (0,'s','it');
INSERT INTO t3 VALUES (9,'IQTHK','JCAQM');
SELECT table2.col_int_key
FROM t3 AS table1
LEFT JOIN t1 AS table2 ON table1.col_int_key < table2.col_int_key
LEFT JOIN t2 AS table3 ON table2.col_varchar_10_latin1_key >=
table3.col_varchar_10_utf8_key
;
col_int_key
NULL
NULL
select * from information_schema.optimizer_trace;
QUERY	TRACE	MISSING_BYTES_BEYOND_MAX_MEM_SIZE	INSUFFICIENT_PRIVILEGES
SELECT table2.col_int_key
FROM t3 AS table1
LEFT JOIN t1 AS table2 ON table1.col_int_key < table2.col_int_key
LEFT JOIN t2 AS table3 ON table2.col_varchar_10_latin1_key >=
table3.col_varchar_10_utf8_key	{
  "steps": [
    {
      "join_preparation": {
        "select#": 1,
        "steps": [
          {
            "expanded_query": "/* select#1 */ select `test`.`table2`.`col_int_key` AS `col_int_key` from ((`test`.`t3` `table1` left join `test`.`t1` `table2` on((`test`.`table1`.`col_int_key` < `test`.`table2`.`col_int_key`))) left join `test`.`t2` `table3` on((convert(`test`.`table2`.`col_varchar_10_latin1_key` using utf8) >= `test`.`table3`.`col_varchar_10_utf8_key`)))"
          }
        ] /* steps */
      } /* join_preparation */
    },
    {
      "join_optimization": {
        "select#": 1,
        "steps": [
          {
            "ref_optimizer_key_uses": [
            ] /* ref_optimizer_key_uses */
          },
          {
            "records_estimation": [
              {
                "database": "test",
                "table": "table1",
                "table_scan": {
                  "records": 2,
                  "cost": 2
                } /* table_scan */
              },
              {
                "database": "test",
                "table": "table2",
                "records": 1,
                "cost": 1,
                "table_type": "system"
              },
              {
                "database": "test",
                "table": "table3",
                "table_scan": {
                  "records": 1,
                  "cost": 2
                } /* table_scan */
              }
            ] /* records_estimation */
          },
          {
            "considered_execution_plans": [
              {
                "database": "test",
                "table": "table1",
                "best_access_path": {
                  "considered_access_paths": [
                    {
                      "access_type": "scan",
                      "records": 2,
                      "cost": 2.0107,
                      "chosen": true
                    }
                  ] /* considered_access_paths */
                } /* best_access_path */,
                "cost_for_plan": 2.4107,
                "records_for_plan": 2,
                "rest_of_plan": [
                  {
                    "database": "test",
                    "table": "table3",
                    "best_access_path": {
                      "considered_access_paths": [
                        {
                          "access_type": "scan",
                          "using_join_cache": true,
                          "records": 1,
                          "cost": 2.005,
                          "chosen": true
                        }
                      ] /* considered_access_paths */
                    } /* best_access_path */,
                    "cost_for_plan": 4.8158,
                    "records_for_plan": 2,
                    "chosen": true
                  }
                ] /* rest_of_plan */
              }
            ] /* considered_execution_plans */
          },
          {
            "attaching_conditions_to_tables": {
              "original_condition": "1",
              "attached_conditions_computation": [
                {
                  "database": "test",
                  "table": "table3",
                  "rechecking_index_usage": {
                    "range_analysis": {
                      "table_scan": {
                        "records": 1,
                        "cost": 4.3049
                      } /* table_scan */,
                      "potential_range_indices": [
                        {
                          "index": "col_varchar_10_utf8_key",
                          "usable": true,
                          "key_parts": [
                            "col_varchar_10_utf8_key"
                          ] /* key_parts */
                        },
                        {
                          "index": "col_int_key",
                          "usable": false,
                          "cause": "not_applicable"
                        }
                      ] /* potential_range_indices */,
                      "best_covering_index_scan": {
                        "index": "col_varchar_10_utf8_key",
                        "cost": 1.2,
                        "chosen": true
                      } /* best_covering_index_scan */,
                      "setup_range_conditions": [
                        {
                          "impossible_condition": {
                            "cause": "comparison_with_null_always_false"
                          } /* impossible_condition */
                        }
                      ] /* setup_range_conditions */,
                      "impossible_range": true
                    } /* range_analysis */,
                    "without_ON_clause": {
                      "range_analysis": {
                        "table_scan": {
                          "records": 1,
                          "cost": 4.3049
                        } /* table_scan */,
                        "potential_range_indices": [
                          {
                            "index": "col_varchar_10_utf8_key",
                            "usable": true,
                            "key_parts": [
                              "col_varchar_10_utf8_key"
                            ] /* key_parts */
                          },
                          {
                            "index": "col_int_key",
                            "usable": false,
                            "cause": "not_applicable"
                          }
                        ] /* potential_range_indices */,
                        "best_covering_index_scan": {
                          "index": "col_varchar_10_utf8_key",
                          "cost": 1.2,
                          "chosen": true
                        } /* best_covering_index_scan */,
                        "group_index_range": {
                          "chosen": false,
                          "cause": "not_single_table"
                        } /* group_index_range */
                      } /* range_analysis */
                    } /* without_ON_clause */
                  } /* rechecking_index_usage */
                }
              ] /* attached_conditions_computation */,
              "attached_conditions_summary": [
                {
                  "database": "test",
                  "table": "table1",
                  "attached": null
                },
                {
                  "database": "test",
                  "table": "table3",
                  "attached": "trigcond_if(is_not_null_compl(table3), (convert(NULL using utf8) >= `test`.`table3`.`col_varchar_10_utf8_key`), true)"
                }
              ] /* attached_conditions_summary */
            } /* attaching_conditions_to_tables */
          },
          {
            "refine_plan": [
              {
                "database": "test",
                "table": "table1",
                "scan_type": "table"
              },
              {
                "database": "test",
                "table": "table3",
                "scan_type": "index"
              }
            ] /* refine_plan */
          }
        ] /* steps */
      } /* join_optimization */
    },
    {
      "join_execution": {
        "select#": 1,
        "steps": [
        ] /* steps */
      } /* join_execution */
    }
  ] /* steps */
}	0	0
DROP TABLE t1,t2,t3;
