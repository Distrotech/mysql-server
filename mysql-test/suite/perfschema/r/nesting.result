"================== con1 connected =================="
select "MARKER_BEGIN" as marker;
marker
MARKER_BEGIN
select "This is simple statement one" as payload;
payload
This is simple statement one
select "This is simple statement two" as payload;
payload
This is simple statement two
select "This is the first part of a multi query" as payload;
select "And this is the second part of a multi query" as payload;
select "With a third part to make things complete" as payload;
$$
payload
This is the first part of a multi query
payload
And this is the second part of a multi query
payload
With a third part to make things complete
select "MARKER_END" as marker;
marker
MARKER_END
"================== con1 done =================="
set @con1_tid = (select thread_id from performance_schema.threads
where processlist_user = 'user1');
select (@con1_tid is not null) as expected;
expected
1
set @marker_begin = (select event_id from performance_schema.events_statements_history_long
where sql_text like "%MARKER_BEGIN%");
select (@marker_begin is not null) as expected;
expected
1
set @marker_end = (select end_event_id from performance_schema.events_statements_history_long
where sql_text like "%MARKER_END%");
select (@marker_end is not null) as expected;
expected
1
select * from (
(
select (event_id - @marker_begin) as relative_event_id,
(end_event_id - @marker_begin) as relative_end_event_id,
event_name,
sql_text as comment,
nesting_event_type,
(nesting_event_id - @marker_begin) as relative_nesting_event_id
from performance_schema.events_statements_history_long
where (thread_id = @con1_tid)
and (@marker_begin <= event_id)
and (end_event_id <= @marker_end)
)
union
(
select (event_id - @marker_begin) as relative_event_id,
(end_event_id - @marker_begin) as relative_end_event_id,
event_name,
"(stage)" as comment,
nesting_event_type,
(nesting_event_id - @marker_begin) as relative_nesting_event_id
from performance_schema.events_stages_history_long
where (thread_id = @con1_tid)
and (@marker_begin <= event_id)
and (end_event_id <= @marker_end)
)
union
(
select (event_id - @marker_begin) as relative_event_id,
(end_event_id - @marker_begin) as relative_end_event_id,
event_name,
operation as comment,
nesting_event_type,
(nesting_event_id - @marker_begin) as relative_nesting_event_id
from performance_schema.events_waits_history_long
where (thread_id = @con1_tid)
and (@marker_begin <= event_id)
and (end_event_id <= @marker_end)
)
) all_events
order by relative_event_id asc;
relative_event_id	relative_end_event_id	event_name	comment	nesting_event_type	relative_nesting_event_id
0	14	statement/sql/select	select "MARKER_BEGIN" as marker	NULL	NULL
1	3	stage/sql/init	(stage)	STATEMENT	0
2	2	wait/io/socket/sql/client_connection	recv	STAGE	1
3	3	wait/io/file/sql/query_log	write	STAGE	1
4	4	stage/sql/checking permissions	(stage)	STATEMENT	0
5	5	stage/sql/Opening tables	(stage)	STATEMENT	0
6	6	stage/sql/init	(stage)	STATEMENT	0
7	7	stage/sql/optimizing	(stage)	STATEMENT	0
8	8	stage/sql/executing	(stage)	STATEMENT	0
9	9	stage/sql/end	(stage)	STATEMENT	0
10	10	stage/sql/query end	(stage)	STATEMENT	0
11	11	stage/sql/closing tables	(stage)	STATEMENT	0
12	13	stage/sql/freeing items	(stage)	STATEMENT	0
13	13	wait/io/socket/sql/client_connection	send	STAGE	12
14	14	stage/sql/cleaning up	(stage)	STATEMENT	0
15	15	idle	idle	NULL	NULL
16	30	statement/sql/select	select "This is simple statement one" as payload	NULL	NULL
17	19	stage/sql/init	(stage)	STATEMENT	16
18	18	wait/io/socket/sql/client_connection	recv	STAGE	17
19	19	wait/io/file/sql/query_log	write	STAGE	17
20	20	stage/sql/checking permissions	(stage)	STATEMENT	16
21	21	stage/sql/Opening tables	(stage)	STATEMENT	16
22	22	stage/sql/init	(stage)	STATEMENT	16
23	23	stage/sql/optimizing	(stage)	STATEMENT	16
24	24	stage/sql/executing	(stage)	STATEMENT	16
25	25	stage/sql/end	(stage)	STATEMENT	16
26	26	stage/sql/query end	(stage)	STATEMENT	16
27	27	stage/sql/closing tables	(stage)	STATEMENT	16
28	29	stage/sql/freeing items	(stage)	STATEMENT	16
29	29	wait/io/socket/sql/client_connection	send	STAGE	28
30	30	stage/sql/cleaning up	(stage)	STATEMENT	16
31	31	idle	idle	NULL	NULL
32	46	statement/sql/select	select "This is simple statement two" as payload	NULL	NULL
33	35	stage/sql/init	(stage)	STATEMENT	32
34	34	wait/io/socket/sql/client_connection	recv	STAGE	33
35	35	wait/io/file/sql/query_log	write	STAGE	33
36	36	stage/sql/checking permissions	(stage)	STATEMENT	32
37	37	stage/sql/Opening tables	(stage)	STATEMENT	32
38	38	stage/sql/init	(stage)	STATEMENT	32
39	39	stage/sql/optimizing	(stage)	STATEMENT	32
40	40	stage/sql/executing	(stage)	STATEMENT	32
41	41	stage/sql/end	(stage)	STATEMENT	32
42	42	stage/sql/query end	(stage)	STATEMENT	32
43	43	stage/sql/closing tables	(stage)	STATEMENT	32
44	45	stage/sql/freeing items	(stage)	STATEMENT	32
45	45	wait/io/socket/sql/client_connection	send	STAGE	44
46	46	stage/sql/cleaning up	(stage)	STATEMENT	32
47	47	idle	idle	NULL	NULL
48	61	statement/sql/select	select "This is the first part of a multi query" as payload;
select "And this is the second part of a multi query" as payload;
select "With a third part to make things complete" as payload	NULL	NULL
49	51	stage/sql/init	(stage)	STATEMENT	48
50	50	wait/io/socket/sql/client_connection	recv	STAGE	49
51	51	wait/io/file/sql/query_log	write	STAGE	49
52	52	stage/sql/checking permissions	(stage)	STATEMENT	48
53	53	stage/sql/Opening tables	(stage)	STATEMENT	48
54	54	stage/sql/init	(stage)	STATEMENT	48
55	55	stage/sql/optimizing	(stage)	STATEMENT	48
56	56	stage/sql/executing	(stage)	STATEMENT	48
57	57	stage/sql/end	(stage)	STATEMENT	48
58	58	stage/sql/query end	(stage)	STATEMENT	48
59	59	stage/sql/closing tables	(stage)	STATEMENT	48
60	61	stage/sql/freeing items	(stage)	STATEMENT	48
61	61	wait/io/socket/sql/client_connection	send	STAGE	60
62	74	statement/sql/select	select "And this is the second part of a multi query" as payload;
select "With a third part to make things complete" as payload	NULL	NULL
63	64	stage/sql/init	(stage)	STATEMENT	62
64	64	wait/io/file/sql/query_log	write	STAGE	63
65	65	stage/sql/checking permissions	(stage)	STATEMENT	62
66	66	stage/sql/Opening tables	(stage)	STATEMENT	62
67	67	stage/sql/init	(stage)	STATEMENT	62
68	68	stage/sql/optimizing	(stage)	STATEMENT	62
69	69	stage/sql/executing	(stage)	STATEMENT	62
70	70	stage/sql/end	(stage)	STATEMENT	62
71	71	stage/sql/query end	(stage)	STATEMENT	62
72	72	stage/sql/closing tables	(stage)	STATEMENT	62
73	74	stage/sql/freeing items	(stage)	STATEMENT	62
74	74	wait/io/socket/sql/client_connection	send	STAGE	73
75	88	statement/sql/select	select "With a third part to make things complete" as payload	NULL	NULL
76	77	stage/sql/init	(stage)	STATEMENT	75
77	77	wait/io/file/sql/query_log	write	STAGE	76
78	78	stage/sql/checking permissions	(stage)	STATEMENT	75
79	79	stage/sql/Opening tables	(stage)	STATEMENT	75
80	80	stage/sql/init	(stage)	STATEMENT	75
81	81	stage/sql/optimizing	(stage)	STATEMENT	75
82	82	stage/sql/executing	(stage)	STATEMENT	75
83	83	stage/sql/end	(stage)	STATEMENT	75
84	84	stage/sql/query end	(stage)	STATEMENT	75
85	85	stage/sql/closing tables	(stage)	STATEMENT	75
86	87	stage/sql/freeing items	(stage)	STATEMENT	75
87	87	wait/io/socket/sql/client_connection	send	STAGE	86
88	88	stage/sql/cleaning up	(stage)	STATEMENT	75
89	89	idle	idle	NULL	NULL
90	104	statement/sql/select	select "MARKER_END" as marker	NULL	NULL
91	93	stage/sql/init	(stage)	STATEMENT	90
92	92	wait/io/socket/sql/client_connection	recv	STAGE	91
93	93	wait/io/file/sql/query_log	write	STAGE	91
94	94	stage/sql/checking permissions	(stage)	STATEMENT	90
95	95	stage/sql/Opening tables	(stage)	STATEMENT	90
96	96	stage/sql/init	(stage)	STATEMENT	90
97	97	stage/sql/optimizing	(stage)	STATEMENT	90
98	98	stage/sql/executing	(stage)	STATEMENT	90
99	99	stage/sql/end	(stage)	STATEMENT	90
100	100	stage/sql/query end	(stage)	STATEMENT	90
101	101	stage/sql/closing tables	(stage)	STATEMENT	90
102	103	stage/sql/freeing items	(stage)	STATEMENT	90
103	103	wait/io/socket/sql/client_connection	send	STAGE	102
104	104	stage/sql/cleaning up	(stage)	STATEMENT	90
