# WL2540 replication events checksum
# Testing configuration parameters

--source include/master-slave.inc
--source include/have_debug.inc
--source include/have_binlog_format_mixed.inc

call mtr.add_suppression('Slave can not handle replication events with the checksum that master is configured to log');
call mtr.add_suppression('Replication event checksum verification failed');
# due to C failure simulation
call mtr.add_suppression('Relay log write failure: could not queue event from master');

# A. read/write access to the global vars:
# binlog_checksum master_verify_checksum slave_sql_verify_checksum

connection master;

set @save_binlog_checksum= @@global.binlog_checksum;
set @save_master_verify_checksum =  @@global.master_verify_checksum;

select @@global.binlog_checksum as 'must be one because of the command line option';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
select @@session.binlog_checksum as 'no session var';

select @@global.master_verify_checksum  as 'must be zero because of default';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
select @@session.master_verify_checksum  as 'no session var';

connection slave;

set @save_slave_sql_verify_checksum = @@global.slave_sql_verify_checksum;

select @@global.slave_sql_verify_checksum  as 'must be one because of default';
--error ER_INCORRECT_GLOBAL_LOCAL_VAR
select @@session.slave_sql_verify_checksum  as 'no session var';

connection master;

source include/show_binary_logs.inc;
set @@global.binlog_checksum = 0;
--echo  *** must be rotations seen ***
source include/show_binary_logs.inc;

set @@global.binlog_checksum = default;

# testing lack of side-effects in non-effective update of binlog_checksum:
set @@global.binlog_checksum = 1;
set @@global.binlog_checksum = 1; 

set @@global.master_verify_checksum = 0;
set @@global.master_verify_checksum = default;

--error ER_WRONG_VALUE_FOR_VAR
set @@global.binlog_checksum = 2; # the var is of bool type
--error ER_WRONG_VALUE_FOR_VAR
set @@global.master_verify_checksum = 2; # the var is of bool type

connection slave;

set @@global.slave_sql_verify_checksum = 0;
set @@global.slave_sql_verify_checksum = default;
--error ER_WRONG_VALUE_FOR_VAR
set @@global.slave_sql_verify_checksum = 2; # the var is of bool type

#
# B. Old Slave to New master conditions
#
# while master does not send a checksum-ed binlog the Old Slave can
# work with the New Master

connection master;

set @@global.binlog_checksum = 0;
create table t1 (a int);

# testing that binlog rotation preserves opt_binlog_checksum value
flush logs;

sync_slave_with_master;
#connection slave;
select count(*) as zero from t1;
source include/stop_slave.inc;

connection master;
set @@global.binlog_checksum = 1;
insert into t1 values (1) /* will not be applied on slave due to simulation */;

# instruction to the dump thread
### set @@global.debug='d,simulate_slave_unaware_checksum'; # merge todo: +/- d syntax fails in my clone

connection slave;
set @@global.debug='d,simulate_slave_unaware_checksum'; # merge todo: +/- d syntax fails in my clone
start slave;
source include/wait_for_slave_io_to_stop.inc;

let $errno= query_get_value(SHOW SLAVE STATUS, Last_IO_Errno, 1);
let $error= query_get_value(SHOW SLAVE STATUS, Last_IO_Error, 1);
--echo *** Got IO thread error code: $errno, text: $error ***

select count(*) as zero from t1;

###connection master;
set @@global.debug=''; # merge todo: +/- d syntax fails in my clone

connection slave;
source include/start_slave.inc;

# 
# C. checksum failure simulations
#

# C1. Failure by a client thread
connection master;
set @@global.master_verify_checksum = 1;
set @@session.debug='d,simulate_checksum_test_failure'; # merge todo deploy +/- syntax
--error ER_ERROR_WHEN_EXECUTING_COMMAND
show binlog events;
set @@session.debug=''; # merge todo: +/- d syntax fails in my clone
set @@global.master_verify_checksum = default;

#connection master;
sync_slave_with_master;

connection slave;
source include/stop_slave.inc;

connection master;
create table t2 (a int);
let $pos_master= query_get_value(SHOW MASTER STATUS, Position, 1);

connection slave;

# C2. Failure by IO thread
# instruction to io thread
set @@global.debug='d,simulate_checksum_test_failure'; # merge todo deploy +/- syntax
start slave io_thread;
source include/wait_for_slave_io_to_stop.inc;
let $errno= query_get_value(SHOW SLAVE STATUS, Last_IO_Errno, 1);
let $error= query_get_value(SHOW SLAVE STATUS, Last_IO_Error, 1);
--echo *** Got IO thread error code: $errno, text: $error ***
set @@global.debug=''; # todo: merge

# to make IO thread re-read it again w/o the failure
start slave io_thread;
let $slave_param= Read_Master_Log_Pos;
let $slave_param_value= $pos_master;
source include/wait_for_slave_param.inc;

# C3. Failure by SQL thread
# instruction to sql thread;
set @@global.slave_sql_verify_checksum = 1;

set @@global.debug='d,simulate_checksum_test_failure'; # merge todo deploy +/- syntax

start slave sql_thread;
source include/wait_for_slave_sql_to_stop.inc;
let $errno= query_get_value(SHOW SLAVE STATUS, Last_SQL_Errno, 1);
let $error= query_get_value(SHOW SLAVE STATUS, Last_SQL_Error, 1);
--echo *** Got SQL thread error code: $errno, text: $error ***

# resuming SQL thread to parse out the event w/o the failure

set @@global.debug=''; 

stop slave;
source include/start_slave.inc;

#clean-up

connection master;
drop table t1, t2;
set @@global.binlog_checksum = @save_binlog_checksum;
set @@global.master_verify_checksum = @save_master_verify_checksum;

#connection slave;
sync_slave_with_master;

set @@global.slave_sql_verify_checksum = @save_slave_sql_verify_checksum;

--echo End of tests
