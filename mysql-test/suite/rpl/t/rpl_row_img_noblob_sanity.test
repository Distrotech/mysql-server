#
#  Description
#  ===========
#
#  This test case checks whether binlog files contain
#  Before and After image values as expected.
#
#  Configuration is done using the --binlog-row-image
#  option. 
#
#  How it works
#  ============
#
#  The test case is implemented such that master and slave
#  create a table with different types of keys. Then, deletes
#  and updates are performed in the master. The resulting
#  output of mysqlbinlog -v issued on the binlogs generated 
#  is then searched for the pattern expected wrt before and 
#  after images.
#
#  See also WL#5096.


-- source include/master-slave.inc
-- source include/have_binlog_format_row.inc
-- connection master

-- let $TMP_FILE= $MYSQLTEST_VARDIR/tmp/rpl_row_img_noblob_sanity.tmp

-- echo ###################################
-- echo # NO KEYS
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob);
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n/m);
  close(FILE);
EOF

-- connection slave

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n/m);
  close(FILE);
EOF

-- echo ###################################
-- echo # KEYS
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, key(c1));
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n/m);
  close(FILE);
EOF

-- connection slave

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n/m);
  close(FILE);
EOF

-- echo ###################################
-- echo # UNIQUE KEY NULLABLE
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, unique key(c1));
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n/m);
  close(FILE);
EOF

-- connection slave

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n/m);
  close(FILE);
EOF

-- echo ###################################
-- echo # PRIMARY KEY
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, primary key(c1));
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n# at/m);
  close(FILE);
EOF

-- connection slave

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n# at/m);
  close(FILE);
EOF

-- echo ###################################
-- echo # UNIQUE KEY NOT NULL
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int NOT NULL, c2 int, c3 blob, unique key(c1));
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n# at/m);
  close(FILE);
EOF

-- connection slave

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n# at/m);
  close(FILE);
EOF

-- echo ###################################
-- echo # PK (contains blob)
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, primary key(c1,c3(512)));
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n# at/m);
  close(FILE);
EOF

-- connection slave

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n###   \@3='a'\n### SET\n###   \@1=2\n###   \@2=2\n# at/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=2\n###   \@2=2\n###   \@3='a'\n# at/m);
  close(FILE);
EOF

-- echo ###################################
-- echo # PK (does not contain blob, but blob is updated)
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, primary key(c1,c2));
INSERT INTO t VALUES (1,2,"a");
UPDATE t SET c3='b' WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "master: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n### SET\n###   \@1=1\n###   \@2=2\n###   \@3='b'\n/m);
  print "master: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n/m);
  close(FILE);
EOF

-- connection slave


-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE
-- let BINLOG_CONTENTS= $TMP_FILE

perl;
  $binlog= $ENV{'BINLOG_CONTENTS'};
  open(FILE, "$binlog") or die("Unable to open $log_error: $!\n");
  my $contents = do { local $/; <FILE> };
  print "slave: Unexpected columns in binlog (update row event)\n" if not ($contents =~ /### UPDATE test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n### SET\n###   \@1=1\n###   \@2=2\n###   \@3='b'\n/m);
  print "slave: Unexpected columns in binlog (delete row event)\n" if not ($contents =~ /### DELETE FROM test\.t\n### WHERE\n###   \@1=1\n###   \@2=2\n/m);
  close(FILE);
EOF

-- remove_file $TMP_FILE

exit;
