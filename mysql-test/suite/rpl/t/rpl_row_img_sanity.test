#
#  Description
#  ===========
#
#  This test case checks whether binlog files contain
#  Before and After image values as expected.
#
#  Configuration is done using the --binlog-row-image
#  variable.
#
#  How it works
#  ============
#
#  The test case is implemented such that master and slave
#  create a table with different types of keys. Then, deletes
#  and updates are performed in the master. The resulting
#  output of mysqlbinlog -v issued on the binlogs generated 
#  is then searched for the pattern expected wrt before and 
#  after images.
#
#  Some special cases are also considered. A small description
#  for each one is provided inline.
#
#  See also WL#5096.
#
#  NOTE: cases marked with S#(-#) address review comments in:
#        http://lists.mysql.com/commits/89844        

-- source include/master-slave.inc
-- source include/have_binlog_format_row.inc

-- connection slave
call mtr.add_suppression("Slave: Can\'t find record in \'t\' Error_code: 1032");
-- connection master

-- let $TMP_FILE= $MYSQLTEST_VARDIR/tmp/rpl_row_img_sanity.tmp
-- let IMG_BINLOG_FILE= $TMP_FILE

-- source include/master-slave-reset.inc

## save original 
-- connection master
SET @old_binlog_row_image= @@binlog_row_image;
-- connection slave
SET @old_binlog_row_image= @@binlog_row_image;
-- connection master

-- echo #####################################################
-- echo # (S4-7) basic assertion that binlog_row_image='FULL' is the
-- echo ######################################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='FULL';
SET SESSION binlog_row_image='FULL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='FULL';
SET SESSION binlog_row_image='FULL';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc

-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, primary key(c1));
INSERT INTO t(c1,c3) VALUES (1, 'a');
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t;

-- sync_slave_with_master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>NULL, 3=>"\'a\'"}
-- let IMG_AI_EXPECTED={1=>2, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>2, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>NULL, 3=>"\'a\'"}
-- let IMG_AI_EXPECTED={1=>2, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>2, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
DROP TABLE t;
-- sync_slave_with_master

-- remove_file $TMP_FILE

# S3 - make rpl_row_img_sanity more human readable.
#
# I have split these runs into iterations. Each iteration acts as a
# parameter to the create table include file and the assertions
# include file.
#
# For this to work I also had to patch mysql-5.1-rep+2 with patch for 
# BUG#48671 which will be in next-mr (so that we could use perl; inside 
# while). Since this is targetting next-mr we can later null-merge for 
# that piece of code.

-- connection master
-- let $nloops_row_img=3
while ($nloops_row_img)
{
  -- let $iteration= $nloops_row_img
  -- source suite/rpl/include/rpl_row_img_sanity_set_img.inc

  -- let $nloops_indexes= 5
  while ($nloops_indexes)
  {
    -- let $iteration= $nloops_indexes

    -- echo ITERATIONS: row_img: $nloops_row_img, indexes: $nloops_indexes

    -- source include/master-slave-reset.inc
    -- connection master

    # create the table
    -- source suite/rpl/include/rpl_row_img_sanity_create_table.inc
    -- connection slave
    -- source suite/rpl/include/rpl_row_img_sanity_create_table.inc
    -- connection master

    # issue some statements
    INSERT INTO t VALUES (1,2,"a");
    INSERT INTO t(c1,c3) VALUES (10,"a");
    # we need to test insert delayed to check if the thread handling
    # the delayed inserts also marks the correct write set (it has its
    # own sort of table object).
    INSERT DELAYED INTO t(c1,c3) VALUES (100,"a");
    INSERT INTO t(c1) VALUES (1000);
    INSERT DELAYED INTO t(c1) VALUES (10000);
    UPDATE t SET c1=2 WHERE c1=1;
    DELETE FROM t WHERE c2=2;
    DROP TABLE t;

    -- sync_slave_with_master

    # check logged images
    -- connection master
    -- source suite/rpl/include/rpl_row_img_sanity_assertions.inc
    -- connection slave
    -- source suite/rpl/include/rpl_row_img_sanity_assertions.inc

    -- dec $nloops_indexes
  }

  -- dec $nloops_row_img
}

-- echo ################## SPECIAL CASES #########################
-- echo # the ones marked with (S#-#) are mentioned in review:
-- echo # http://lists.mysql.com/commits/89844

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='NOBLOB';
SET SESSION binlog_row_image='NOBLOB';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='NOBLOB';
SET SESSION binlog_row_image='NOBLOB';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- connection master

-- echo ###################################
-- echo # PK (contains blob)
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, primary key(c1,c3(512)));
INSERT INTO t VALUES (1,2,"a");
INSERT INTO t(c1,c3) VALUES (10,"a");
INSERT DELAYED INTO t(c1,c3) VALUES (100,"a");
INSERT INTO t(c1) VALUES (1000);
INSERT DELAYED INTO t(c1) VALUES (10000);
UPDATE t SET c1=2 WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- echo ### checking master images
-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>100, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1000, 2=>NULL}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10000, 2=>NULL}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2, 3=>"\'a\'"}
-- let IMG_AI_EXPECTED={1=>2, 2=>2}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>2, 2=>2, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- remove_file $TMP_FILE

-- connection slave
-- echo ### checking slave images

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>100, 2=>NULL, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1000, 2=>NULL}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10000, 2=>NULL}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2, 3=>"\'a\'"}
-- let IMG_AI_EXPECTED={1=>2, 2=>2}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>2, 2=>2, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- remove_file $TMP_FILE

-- echo ###################################
-- echo # PK (does not contain blob, but blob is updated)
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int, c2 int, c3 blob, primary key(c1,c2));
INSERT INTO t VALUES (1,2,"a");
INSERT INTO t(c1,c3) VALUES (10,"a");
INSERT DELAYED INTO t(c1,c3) VALUES (100,"a");
INSERT INTO t(c1) VALUES (1000);
INSERT DELAYED INTO t(c1) VALUES (10000);
UPDATE t SET c3='b' WHERE c1=1;
DELETE FROM t WHERE c2=2;
DROP TABLE t;

-- sync_slave_with_master
-- connection master

-- echo ### checking master images
-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10, 2=>0, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>100, 2=>0, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1000, 2=>0}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10000, 2=>0}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2}
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'b\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>1, 2=>2}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- remove_file $TMP_FILE

-- connection slave
-- echo ### checking slave images
-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10, 2=>0, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>100, 2=>0, 3=>"\'a\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1000, 2=>0}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>10000, 2=>0}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2}
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'b\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>1, 2=>2}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- remove_file $TMP_FILE

-- echo ###################################
-- echo # (S4-1) AUTOINC columns
-- echo ###################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

CREATE TABLE t (c1 int NOT NULL AUTO_INCREMENT, c2 int, c3 blob, primary key(c1,c2));
INSERT INTO t(c2) VALUES (2);
DROP TABLE t;
-- sync_slave_with_master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- remove_file $TMP_FILE

-- echo ##################################################################
-- echo # (S4-2) Test that slave does not write more columns than the ones it has 
-- echo ##################################################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

SET SQL_LOG_BIN=0;
CREATE TABLE t (c1 int NOT NULL AUTO_INCREMENT, c2 int, c3 blob, primary key(c1,c2));
SET SQL_LOG_BIN=1;

-- connection slave
CREATE TABLE t (c1 int, c2 int, primary key(c1));

-- connection master

INSERT INTO t(c2,c3) VALUES (2,'aaaaa');
UPDATE t SET c2=3, c3='bbbbb' WHERE c2=2;
DROP TABLE t;
-- sync_slave_with_master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1}
-- let IMG_AI_EXPECTED={2=>3}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>"\'aaaaa\'"}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2}
-- let IMG_AI_EXPECTED={2=>3, 3=>"\'bbbbb\'"}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- remove_file $TMP_FILE

-- echo ##################################################################
-- echo # (S4-5) Test that slave fills default columns in its own columns
-- echo ##################################################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='FULL';
SET SESSION binlog_row_image='FULL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='FULL';
SET SESSION binlog_row_image='FULL';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

SET SQL_LOG_BIN=0;
CREATE TABLE t (c1 int, c2 int);
SET SQL_LOG_BIN=1;

-- connection slave
CREATE TABLE t (c1 int, c2 int, c3 int DEFAULT 2005);

-- connection master
INSERT INTO t(c1) VALUES (1);
INSERT INTO t(c1) VALUES (2);
-- sync_slave_with_master
SELECT * FROM t;

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>NULL, 3=>2005}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>2, 2=>NULL, 3=>2005}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
SELECT * FROM t;

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>NULL}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>2, 2=>NULL}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
DROP TABLE t;
-- sync_slave_with_master


-- remove_file $TMP_FILE

-- echo ##################################################################
-- echo # (S4-6) Test that slave uses partial BI when master contains more columns
-- echo ##################################################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

SET SQL_LOG_BIN=0;
CREATE TABLE t (c1 int NOT NULL, c2 int, c3 int, primary key(c1, c3), unique key(c1));
SET SQL_LOG_BIN=1;

-- connection slave
CREATE TABLE t (c1 int NOT NULL, c2 int, unique key(c1));

-- connection master
INSERT INTO t VALUES (1, 2, 3);
UPDATE t SET c2= 4 WHERE c1=1;
-- sync_slave_with_master
SELECT * FROM t;

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1}
-- let IMG_AI_EXPECTED={2=>4}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
SELECT * FROM t;

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>3}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 3=>3}
-- let IMG_AI_EXPECTED={2=>4}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
DROP TABLE t;
-- sync_slave_with_master
-- remove_file $TMP_FILE

-- echo ##################################################################
-- echo # (S4-3) Test that if master has binlog_row_image=MINIMAL and slave has 
-- echo # NOBLOB or FULL, it will log the expected columns
-- echo ##################################################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='FULL';
SET SESSION binlog_row_image='FULL';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

SET SQL_LOG_BIN=0;
CREATE TABLE t (c1 int NOT NULL, c2 int, c3 int, primary key(c1));
SET SQL_LOG_BIN=1;

-- connection slave
CREATE TABLE t (c1 int NOT NULL, c2 int, c3 int, c4 blob, unique key(c1));

-- connection master
INSERT INTO t VALUES (1, 2, 3);
UPDATE t SET c2= 4 WHERE c1=1;
DELETE FROM t WHERE c2=4;
-- sync_slave_with_master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>3, 4=>NULL}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2, 3=>3, 4=>NULL}
-- let IMG_AI_EXPECTED={1=>1, 2=>4, 3=>3, 4=>NULL}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>1, 2=>4, 3=>3, 4=>NULL}
-- let IMG_AI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>3}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1}
-- let IMG_AI_EXPECTED={2=>4}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>1}
-- let IMG_AI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
DROP TABLE t;
-- sync_slave_with_master
-- remove_file $TMP_FILE

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='NOBLOB';
SET SESSION binlog_row_image='NOBLOB';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

SET SQL_LOG_BIN=0;
CREATE TABLE t (c1 int NOT NULL, c2 int, c3 int, primary key(c1));
SET SQL_LOG_BIN=1;

-- connection slave
CREATE TABLE t (c1 int NOT NULL, c2 int, c3 int, c4 blob, unique key(c1));

-- connection master
INSERT INTO t VALUES (1, 2, 3);
UPDATE t SET c2= 4 WHERE c1=1;
DELETE FROM t WHERE c2=4;
-- sync_slave_with_master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/slave-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>3}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1, 2=>2, 3=>3}
-- let IMG_AI_EXPECTED={1=>1, 2=>4, 3=>3}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>1, 2=>4, 3=>3}
-- let IMG_AI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master

-- let $MYSQLD_DATADIR= `select @@datadir;`
-- exec $MYSQL_BINLOG -v $MYSQLD_DATADIR/master-bin.000001 > $TMP_FILE

-- let IMG_STMT_TYPE=INSERT
-- let IMG_AI_EXPECTED={1=>1, 2=>2, 3=>3}
-- let IMG_BI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=UPDATE
-- let IMG_BI_EXPECTED={1=>1}
-- let IMG_AI_EXPECTED={2=>4}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- let IMG_STMT_TYPE=DELETE
-- let IMG_BI_EXPECTED={1=>1}
-- let IMG_AI_EXPECTED={}
-- source suite/rpl/include/rpl_row_mysqbinlog_img_check.inc

-- connection master
DROP TABLE t;
-- sync_slave_with_master
-- remove_file $TMP_FILE


-- echo ################################################################
-- echo # (S4-4) Test that the slave stop with error if no usable data is on BI
-- echo ################################################################

-- source include/master-slave-reset.inc
-- connection master
# global so that flush tables restarts the 
# insert dealyed thread
SET GLOBAL binlog_row_image='MINIMAL';
SET SESSION binlog_row_image='MINIMAL';
SHOW VARIABLES LIKE 'binlog_row_image';
FLUSH TABLES;
-- connection slave
# global so that SQL thread also gets the change
SET GLOBAL binlog_row_image='NOBLOB';
SET SESSION binlog_row_image='NOBLOB';
SHOW VARIABLES LIKE 'binlog_row_image';

-- source include/stop_slave.inc
-- source include/start_slave.inc
-- source include/master-slave-reset.inc
-- connection master

SET SQL_LOG_BIN=0;
CREATE TABLE t (c1 int NOT NULL, c2 int, c3 int, primary key(c3));
SET SQL_LOG_BIN=1;

-- connection slave
CREATE TABLE t (c1 int NOT NULL, c2 int, primary key(c1));

-- connection master

INSERT INTO t VALUES (1,2,3);
UPDATE t SET c2=4 WHERE c2=2;
DROP TABLE t;

-- connection slave
-- source include/wait_for_slave_sql_to_stop.inc
-- let $err= query_get_value(SHOW SLAVE STATUS, Last_SQL_Error, 1)
-- echo $err
-- source include/stop_slave.inc

DROP TABLE t;

## CLEAN UP

-- connection master
SET GLOBAL binlog_row_image= @old_binlog_row_image;
SET SESSION binlog_row_image= @old_binlog_row_image;
-- connection slave
SET GLOBAL binlog_row_image= @old_binlog_row_image;
SET SESSION binlog_row_image= @old_binlog_row_image;

