-- source include/master-slave.inc
-- source include/have_debug.inc

# make the test only run once (STMT is actually needed because of the SLEEPs below)
-- source include/have_binlog_format_statement.inc 

SET @old_debug= @@global.debug;
call mtr.add_suppression('Unsafe statement binlogged in statement format since BINLOG_FORMAT = STATEMENT');

#
#  BUG#29309 test case
#

connection master;
create table t1 (f1 int);
sync_slave_with_master;
source include/stop_slave.inc;
connection master;
let $start= `SELECT UNIX_TIMESTAMP()`;
insert into t1 values (1);

sleep 3;

connection slave;
lock table t1 write;
source include/start_slave.inc;

# ok, now wait for the SQL thread to start the insert
let $wait_timeout= 60; # Override default of 30 seconds with 60.
let $show_statement= SHOW PROCESSLIST;
let $field= Info;
let $condition= = 'insert into t1 values (1)';
source include/wait_show_condition.inc;

# assertion: check that SBM shows at least 3 seconds 
let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $stop= `SELECT UNIX_TIMESTAMP()`;
let $upper_bound= `SELECT $stop - $start`;
let $lower_bound= 3;
if (`SELECT $sbm < $lower_bound or $sbm > $upper_bound`)
{
  -- echo #### Seconds behind master is not in acceptable time window
  -- source include/show_rpl_debug_info.inc
  -- die
}

unlock tables;
connection master;
sync_slave_with_master;
lock table t1 write;
connection master;
let $start= `SELECT UNIX_TIMESTAMP()`;
insert into t1 values (2);

sleep 3;

connection slave;
# ok, now wait for the SQL thread to start the insert
let $wait_timeout= 60; # Override default of 30 seconds with 60.
let $show_statement= SHOW PROCESSLIST;
let $field= Info;
let $condition= = 'insert into t1 values (2)';
source include/wait_show_condition.inc;

# assertion: flush logs will not reset the sbm value
flush logs;

sleep 3;

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $stop= `SELECT UNIX_TIMESTAMP()`;
let $upper_bound= `SELECT $stop - $start`;
let $lower_bound= 6;
if (`SELECT $sbm < $lower_bound or $sbm > $upper_bound`)
{
  -- echo #### Seconds behind master is not in acceptable time window
  -- source include/show_rpl_debug_info.inc
  -- die
}

unlock tables;
connection master;
drop table t1;
sync_slave_with_master;

#
# BUG#52166 test case 
#

#  1. Check that seconds behind master is set to 0 when SQL 
#     thread waits for more events.
#  2. Check that seconds behind master is updated once after 
#     a newly received event starts to be processed.

-- source include/master-slave-reset.inc
-- connection master

# this will increase the timestamp +3600, so it becomes
# clear at the slave that it must show 0 and not 3600
SET GLOBAL DEBUG= '+d,dec_event_time_by_1_hour';
CREATE TABLE t1 (a INT);
-- sync_slave_with_master

# ok, now wait for the SQL thread to sleep
let $wait_timeout= 60; # Override default of 30 seconds with 60.
let $show_statement= SHOW PROCESSLIST;
let $field= State;
let $condition= = 'Slave has read all relay log; waiting for the slave I/O thread to update it';
-- source include/wait_show_condition.inc

-- let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1)
if (`SELECT $sbm <> 0`)
{
  -- echo #### Seconds behind master must show '0', because SQL thread is now waiting for new events.
  -- echo #### SBM ($sbm seconds) != 0 !! SQL thread is waiting so should be zero.
  -- source include/show_rpl_debug_info.inc
  -- die
}

-- connection slave
LOCK TABLE t1 WRITE;

-- connection master

# Now we will be testing that seconds behind master 
# is set correctly once the event is dequeued and is executing.
# To achieve this goal we will make the event timestamp
# to be shifted 3600 seconds (so that time difference 
# becomes clear). 

#
# 10 seconds, this will give us time at the slave to 
# show that Seconds_Behind_Master will increase when
# this query starts to execute.
#
-- disable_warnings
INSERT INTO t1 VALUES (sleep (10));
-- enable_warnings

-- connection slave

# ok, now wait for the SQL thread to start the insert
let $wait_timeout= 60; # Override default of 30 seconds with 60.
let $show_statement= SHOW PROCESSLIST;
let $field= Info;
let $condition= = 'INSERT INTO t1 VALUES (sleep (10))';
-- source include/wait_show_condition.inc

-- let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1)
if (`SELECT $sbm < 3600`)
{
  -- echo #### Seconds behind master must show > 3600 because the event that 
  -- echo #### is being processed was issued 3600 seconds ago.
  -- echo #### SBM ($sbm seconds) <= 3600 ! 
  -- source include/show_rpl_debug_info.inc
  -- die
}

UNLOCK TABLES;

-- connection master
DROP TABLE t1;
-- sync_slave_with_master
-- connection master

SET @@global.debug= @old_debug;

-- source include/master-slave-end.inc
