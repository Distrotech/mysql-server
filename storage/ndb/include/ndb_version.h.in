/*
   Copyright (C) 2003 MySQL AB
    All rights reserved. Use is subject to license terms.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/

#ifndef NDB_VERSION_H
#define NDB_VERSION_H

#include <ndb_types.h>

/**
 * This is updated each time a version of backup/lcp format is changed
 *   when it's updated, it's set to version that made the change
 */
#define NDB_BACKUP_VERSION NDB_MAKE_VERSION(6,3,11)

#define NDB_VERSION_MAJOR @NDB_VERSION_MAJOR@
#define NDB_VERSION_MINOR @NDB_VERSION_MINOR@
#define NDB_VERSION_BUILD @NDB_VERSION_BUILD@

/* NDB status version */
#define NDB_VERSION_STATUS "@NDB_VERSION_STATUS@"

#define NDB_MYSQL_VERSION_MAJOR @NDB_MYSQL_VERSION_MAJOR@
#define NDB_MYSQL_VERSION_MINOR @NDB_MYSQL_VERSION_MINOR@
#define NDB_MYSQL_VERSION_BUILD @NDB_MYSQL_VERSION_BUILD@

#define NDB_MAKE_VERSION(A,B,C) (((A) << 16) | ((B) << 8)  | ((C) << 0))

#define NDB_MYSQL_VERSION_D NDB_MAKE_VERSION(NDB_MYSQL_VERSION_MAJOR, NDB_MYSQL_VERSION_MINOR, NDB_MYSQL_VERSION_BUILD)
#define NDB_VERSION_D NDB_MAKE_VERSION(NDB_VERSION_MAJOR, NDB_VERSION_MINOR, NDB_VERSION_BUILD)
#define NDB_VERSION_STRING_BUF_SZ 100
#ifdef __cplusplus
extern "C" {
#endif

void ndbPrintVersion();

Uint32 ndbMakeVersion(Uint32 major, Uint32 minor, Uint32 build);

Uint32 ndbGetMajor(Uint32 version);
  
Uint32 ndbGetMinor(Uint32 version);
  
Uint32 ndbGetBuild(Uint32 version);

const char* ndbGetVersionString(Uint32 version, Uint32 mysql_version, const char * status,
                                char *buf, unsigned sz);
const char* ndbGetOwnVersionString();

Uint32 ndbGetOwnVersion();

#ifdef __cplusplus
}
#endif

#define NDB_VERSION_STRING ndbGetOwnVersionString()

#define NDB_VERSION ndbGetOwnVersion()

/**
 * Version id 
 *
 *  Used by transporter and when communicating with
 *     managment server
 */
/*#define NDB_VERSION_ID 0*/

/**
 * From which version do we support rowid
 */ 
#define NDBD_ROWID_VERSION (NDB_MAKE_VERSION(5,1,6))
#define NDBD_INCL_NODECONF_VERSION_4 NDB_MAKE_VERSION(4,1,17)
#define NDBD_INCL_NODECONF_VERSION_5 NDB_MAKE_VERSION(5,0,18)
#define NDBD_FRAGID_VERSION (NDB_MAKE_VERSION(5,1,6))
#define NDBD_DICT_LOCK_VERSION_5 NDB_MAKE_VERSION(5,0,23)
#define NDBD_DICT_LOCK_VERSION_5_1 NDB_MAKE_VERSION(5,1,12)

#define NDBD_UPDATE_FRAG_DIST_KEY_50 NDB_MAKE_VERSION(5,0,26)
#define NDBD_UPDATE_FRAG_DIST_KEY_51 NDB_MAKE_VERSION(5,1,12)

#define NDBD_QMGR_SINGLEUSER_VERSION_5 NDB_MAKE_VERSION(5,0,25)

#define NDBD_SPLIT_VERSION NDB_MAKE_VERSION(6,1,0)
#define NDBD_NODE_VERSION_REP NDB_MAKE_VERSION(6,1,1)

#define NDBD_255_NODES_VERSION NDB_MAKE_VERSION(5,1,4)

#define NDBD_MICRO_GCP_62 NDB_MAKE_VERSION(6,2,5)
#define NDBD_MICRO_GCP_63 NDB_MAKE_VERSION(6,3,2)
#define NDBD_RAW_LCP MAKE_VERSION(6,3,11)

static
inline
int
ndb_check_micro_gcp(Uint32 version)
{	
  if (version == NDB_VERSION_D)
    return 1;
  {
    const Uint32 major = (version >> 16) & 0xFF;
    const Uint32 minor = (version >>  8) & 0xFF;
    if (major >= 6)
    {
      if (minor == 2)
        return version >= NDBD_MICRO_GCP_62;
      return version >= NDBD_MICRO_GCP_63;
    }
  }
  return 0;
}

#define NDBD_PREPARE_COPY_FRAG_VERSION NDB_MAKE_VERSION(6,2,1)
#define NDBD_PREPARE_COPY_FRAG_V2_51 NDB_MAKE_VERSION(5,1,23)
#define NDBD_PREPARE_COPY_FRAG_V2_62 NDB_MAKE_VERSION(6,2,8)
#define NDBD_PREPARE_COPY_FRAG_V2_63 NDB_MAKE_VERSION(6,3,6)

/**
 * 0 = NO PREP COPY FRAG SUPPORT
 * 1 = NO MAX PAGE SUPPORT
 * 2 = LATEST VERSION
 */
static
inline
int
ndb_check_prep_copy_frag_version(Uint32 version)
{	
  const Uint32 major = (version >> 16) & 0xFF;
  const Uint32 minor = (version >>  8) & 0xFF;

  if (version == NDB_VERSION_D)
    return 2;

  if (major >= 6)
  {
    if (minor == 2)
    {
      if (version >= NDBD_PREPARE_COPY_FRAG_V2_62)
        return 2;
      if (version >= NDBD_PREPARE_COPY_FRAG_VERSION)
        return 1;
      return 0;
    }
    else if (minor == 3)
    {
      if (version >= NDBD_PREPARE_COPY_FRAG_V2_63)
        return 2;
      return 1;
    }
    return 2;
  }
  else if (major == 5 && minor == 1)
  {
    if (version >= NDBD_PREPARE_COPY_FRAG_V2_51)
      return 2;
  }
    
  return 0;
}

#define NDBD_PNR NDB_MAKE_VERSION(6,3,8)

static 
inline
int
ndb_pnr(Uint32 version)
{
  return 
    version == NDB_VERSION_D || version >= NDBD_PNR;
}

#define NDBD_SUMA_DICT_LOCK_62 NDB_MAKE_VERSION(6,2,14)
#define NDBD_SUMA_DICT_LOCK_63 NDB_MAKE_VERSION(6,3,11)

static
inline
int
ndbd_suma_dictlock(Uint32 x)
{
  if (x >= NDB_VERSION_D)
    return 1;
  
  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;
    
    if (major >= 6)
    {
      if (minor == 2)
      return x >= NDBD_SUMA_DICT_LOCK_62;
    }
    
    return x >= NDBD_SUMA_DICT_LOCK_63;
  }
}

#define NDBD_LONG_LIST_TABLES_CONF_62 NDB_MAKE_VERSION(6,2,16)
#define NDBD_LONG_LIST_TABLES_CONF_63 NDB_MAKE_VERSION(6,3,15)

static
inline
int
ndbd_LIST_TABLES_CONF_long_signal(Uint32 x)
{
  if (x >= NDB_VERSION_D)
    return 1;

  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;
    
    if (major >= 6)
    {
      if (minor == 2)
        return x >= NDBD_LONG_LIST_TABLES_CONF_62;
    }
    
    return x >= NDBD_LONG_LIST_TABLES_CONF_63;
  }
}

#define NDBD_FILTER_INSTANCE_63 NDB_MAKE_VERSION(6,3,16)
#define NDBD_COPY_GCI_RESTART_NR NDB_MAKE_VERSION(6,3,18)

#define NDBD_API_TAKE_OVERTCCONF_60 NDB_MAKE_VERSION(5,2,4)
#define NDBD_API_TAKE_OVERTCCONF_62 NDB_MAKE_VERSION(6,2,17)
#define NDBD_API_TAKE_OVERTCCONF_63 NDB_MAKE_VERSION(6,3,19)

#define NDBD_DELAYED_COPY_ACTIVEREQ_63 NDB_MAKE_VERSION(6,3,29)
#define NDBD_DELAYED_COPY_ACTIVEREQ_70 NDB_MAKE_VERSION(7,0,10)

static
inline
int
ndb_takeovertc(Uint32 x)
{
  if (x >= NDB_VERSION_D)
    return 1;

  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;
    
    if (major >= 6)
    {
      if (minor == 2)
        return x >= NDBD_API_TAKE_OVERTCCONF_62;
    }
    
    return x >= NDBD_API_TAKE_OVERTCCONF_63;
  }
}

static
inline
int
ndb_delayed_copy_active_req(Uint32 x)
{
  if (x >= NDB_VERSION_D)
    return 1;

  {
    const Uint32 major = (x >> 16) & 0xFF;

    if (major >= 6)
    {
      return x >= NDBD_DELAYED_COPY_ACTIVEREQ_63;
    }
    else
    {
      return x >= NDBD_DELAYED_COPY_ACTIVEREQ_70;
    }
  }
}

#define NDBD_SUMA_NOTSTARTED_REF_63 NDB_MAKE_VERSION(6,3,29)
#define NDBD_SUMA_NOTSTARTED_REF_70 NDB_MAKE_VERSION(7,0,10)

static
inline
int
ndb_suma_not_started_ref(Uint32 x)
{
  if (x >= NDB_VERSION_D)
    return 1;

  {
    const Uint32 major = (x >> 16) & 0xFF;

    if (major >= 6)
    {
      return x >= NDBD_SUMA_NOTSTARTED_REF_63;
    }
    else
    {
      return x >= NDBD_SUMA_NOTSTARTED_REF_70;
    }
  }
}

#define NDBD_HB_ORDER_VERSION_63 NDB_MAKE_VERSION(6,3,35)
#define NDBD_HB_ORDER_VERSION_70 NDB_MAKE_VERSION(7,0,16)
#define NDBD_HB_ORDER_VERSION_71 NDB_MAKE_VERSION(7,1,5)

static
inline
int
ndb_check_hb_order_version(Uint32 x)
{
  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;

    if (major == 6 && minor == 3)
    {
      return x >= NDBD_HB_ORDER_VERSION_63;
    }
    if (major == 7 && minor == 0)
    {
      return x >= NDBD_HB_ORDER_VERSION_70;
    }
    return x >= NDBD_HB_ORDER_VERSION_71;
  }
}

#define NDBD_SUMA_STOP_ME_63 NDB_MAKE_VERSION(6,3,37)
#define NDBD_SUMA_STOP_ME_70 NDB_MAKE_VERSION(7,0,18)
#define NDBD_SUMA_STOP_ME_71 NDB_MAKE_VERSION(7,1,7)

static
inline
int
ndbd_suma_stop_me(Uint32 x)
{
  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;

    if (major == 6)
    {
      return x >= NDBD_SUMA_STOP_ME_63;
    }
    if (major == 7 && minor == 0)
    {
      return x >= NDBD_SUMA_STOP_ME_70;
    }
    return x >= NDBD_SUMA_STOP_ME_71;
  }
}

#define NDBD_DIH_SUB_GCP_COMPLETE_ACK_63 NDB_MAKE_VERSION(6,3,39)
#define NDBD_DIH_SUB_GCP_COMPLETE_ACK_70 NDB_MAKE_VERSION(7,0,20)
#define NDBD_DIH_SUB_GCP_COMPLETE_ACK_71 NDB_MAKE_VERSION(7,1,9)

static
inline
int
ndbd_dih_sub_gcp_complete_ack(Uint32 x)
{
  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;

    if (major == 6)
    {
      return x >= NDBD_DIH_SUB_GCP_COMPLETE_ACK_63;
    }
    if (major == 7 && minor == 0)
    {
      return x >= NDBD_DIH_SUB_GCP_COMPLETE_ACK_70;
    }
    return x >= NDBD_DIH_SUB_GCP_COMPLETE_ACK_71;
  }
}

#define NDBD_FAIL_REP_SOURCE_NODE_63 NDB_MAKE_VERSION(6,3,40)
#define NDBD_FAIL_REP_SOURCE_NODE_70 NDB_MAKE_VERSION(7,0,21)
#define NDBD_FAIL_REP_SOURCE_NODE_71 NDB_MAKE_VERSION(7,1,10)

static 
inline
int
ndbd_fail_rep_source_node(Uint32 x)
{
  {
    const Uint32 major = (x >> 16) & 0xFF;
    const Uint32 minor = (x >>  8) & 0xFF;

    if (major == 6)
    {
      return x >= NDBD_FAIL_REP_SOURCE_NODE_63;
    }
    if (major == 7 && minor == 0)
    {
      return x >= NDBD_FAIL_REP_SOURCE_NODE_70;
    }
    return x >= NDBD_FAIL_REP_SOURCE_NODE_71;
  }
}

#endif
