/*
 Copyright (C) 2009 Sun Microsystems, Inc.
 All rights reserved. Use is subject to license terms.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; version 2 of the License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/
/*
 * myjapi_B.hpp
 */

#ifndef myjapi_B_hpp
#define myjapi_B_hpp

#include "myjapi_classes.hpp"

// API to implement against
#include "myapi.hpp"

// libraries
#include "helpers.hpp"
#include "jtie.hpp"

// The API stub functions in this file have mangled names that adhere
// to the JVM specification.  It is not necessary to include the
// function prototypes generated by the javah tool from the Java source,
//   #include "myjapi_B0.h"
//   #include "myjapi_B1.h"
// if they are declared to receive "C" linkage here.
extern "C" {

// ---------------------------------------------------------------------------
// API JNI function stubs
// ---------------------------------------------------------------------------

JNIEXPORT jint JNICALL
Java_myjapi_B0_f0s(JNIEnv * env, jclass cls) 
{
    TRACE("jint Java_myjapi_B0_f0s(JNIEnv *, jclass)");
    return gcall< ttrait_int32, &B0::f0s >(env, cls);
    //return 20;
}

JNIEXPORT jint JNICALL
Java_myjapi_B0_f0n(JNIEnv * env, jclass cls, jobject obj)
{
    TRACE("jint Java_myjapi_B0_f0n(JNIEnv *, jclass, jobject)");
    (void)cls; return gcall< ttrait_myjapi_B0_ct, ttrait_int32, &B0::f0n >(env, obj);
    //return 21;
}

JNIEXPORT jint JNICALL
Java_myjapi_B0_f0v(JNIEnv * env, jobject obj)
{
    TRACE("jint Java_myjapi_B0_f0v(JNIEnv *, jobject)");
    return gcall< ttrait_myjapi_B0_ct, ttrait_int32, &B0::f0v >(env, obj);
    //return 22;
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_f0s(JNIEnv * env, jclass cls) 
{
    TRACE("jint Java_myjapi_B1_f0s(JNIEnv *, jclass)");
    return gcall< ttrait_int32, &B1::f0s >(env, cls);
    //return 30;
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_f0n(JNIEnv * env, jclass cls, jobject obj)
{
    TRACE("jint Java_myjapi_B1_f0n(JNIEnv *, jclass, jobject)");
    (void)cls; return gcall< ttrait_myjapi_B1_ct, ttrait_int32, &B1::f0n >(env, obj);
    //return 31;
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_f0v(JNIEnv * env, jobject obj)
{
    TRACE("jint Java_myjapi_B1_f0v(JNIEnv *, jobject)");
    return gcall< ttrait_myjapi_B1_ct, ttrait_int32, &B1::f0v >(env, obj);
    //return 32;
}

JNIEXPORT jint JNICALL
Java_myjapi_B0_d0sc(JNIEnv * env, jclass cls)
{
    TRACE("jint Java_myjapi_B0_d0sc(JNIEnv *, jclass)");
    return gget< ttrait_int32_c, B0::d0sc >(env, cls);
}

JNIEXPORT jint JNICALL
Java_myjapi_B0_d0s__(JNIEnv * env, jclass cls)
{
    TRACE("jint Java_myjapi_B0_d0s__(JNIEnv *, jclass)");
    return gget< ttrait_int32, B0::d0s >(env, cls);
}

JNIEXPORT void JNICALL
Java_myjapi_B0_d0s__I(JNIEnv * env, jclass cls, jint p0)
{
    TRACE("void Java_myjapi_B0_d0s__I(JNIEnv *, jclass, jint)");
    gset< ttrait_int32, B0::d0s >(env, cls, p0);
}

JNIEXPORT jint JNICALL
Java_myjapi_B0_d0c(JNIEnv * env, jclass cls, jobject obj)
{
    TRACE("jint Java_myjapi_B0_d0c(JNIEnv *, jclass, jobject)");
    (void)cls; return gget< ttrait_myjapi_B0_t, ttrait_int32_c, &B0::d0c >(env, obj);
}

JNIEXPORT jint JNICALL
Java_myjapi_B0_d0__Lmyjapi_B0_2(JNIEnv * env, jclass cls, jobject obj)
{
    TRACE("jint Java_myjapi_B0_d0__Lmyjapi_B0_2(JNIEnv *, jclass, jobject)");
    (void)cls; return gget< ttrait_myjapi_B0_t, ttrait_int32, &B0::d0 >(env, obj);
}

JNIEXPORT void JNICALL
Java_myjapi_B0_d0__Lmyjapi_B0_2I(JNIEnv * env, jclass cls, jobject obj, jint p0)
{
    TRACE("void Java_myjapi_B0_d0__Lmyjapi_B0_2I(JNIEnv *, jclass, jobject, jint)");
    (void)cls; return gset< ttrait_myjapi_B0_t, ttrait_int32, &B0::d0 >(env, obj, p0);
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_d0sc(JNIEnv * env, jclass cls)
{
    TRACE("jint Java_myjapi_B1_d0sc(JNIEnv *, jclass)");
    return gget< ttrait_int32_c, B1::d0sc >(env, cls);
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_d0s__(JNIEnv * env, jclass cls)
{
    TRACE("jint Java_myjapi_B1_d0s__(JNIEnv *, jclass)");
    return gget< ttrait_int32, B1::d0s >(env, cls);
}

JNIEXPORT void JNICALL
Java_myjapi_B1_d0s__I(JNIEnv * env, jclass cls, jint p0)
{
    TRACE("void Java_myjapi_B1_d0s__I(JNIEnv *, jclass, jint)");
    gset< ttrait_int32, B1::d0s >(env, cls, p0);
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_d0c(JNIEnv * env, jclass cls, jobject obj)
{
    TRACE("jint Java_myjapi_B1_d0c(JNIEnv *, jclass, jobject)");
    (void)cls; return gget< ttrait_myjapi_B1_t, ttrait_int32_c, &B1::d0c >(env, obj);
}

JNIEXPORT jint JNICALL
Java_myjapi_B1_d0__Lmyjapi_B1_2(JNIEnv * env, jclass cls, jobject obj)
{
    TRACE("jint Java_myjapi_B1_d0__Lmyjapi_B1_2(JNIEnv *, jclass, jobject)");
    (void)cls; return gget< ttrait_myjapi_B1_t, ttrait_int32, &B1::d0 >(env, obj);
}

JNIEXPORT void JNICALL
Java_myjapi_B1_d0__Lmyjapi_B1_2I(JNIEnv * env, jclass cls, jobject obj, jint p0)
{
    TRACE("void Java_myjapi_B1_d0__Lmyjapi_B1_2I(JNIEnv *, jclass, jobject, jint)");
    (void)cls; return gset< ttrait_myjapi_B1_t, ttrait_int32, &B1::d0 >(env, obj, p0);
}

// ---------------------------------------------------------------------------

} // extern "C"

#endif // myjapi_B_hpp
