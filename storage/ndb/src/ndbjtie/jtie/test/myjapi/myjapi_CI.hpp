/*
 Copyright (C) 2009 Sun Microsystems, Inc.
 All rights reserved. Use is subject to license terms.

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; version 2 of the License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
*/
/*
 * myjapi_CI.hpp
 */

#ifndef myjapi_CI_hpp
#define myjapi_CI_hpp

#include "myjapi_classes.hpp"

// API to implement against
#include "myapi.hpp"

// libraries
#include "helpers.hpp"
#include "jtie.hpp"

// The API stub functions in this file have mangled names that adhere
// to the JVM specification.  It is not necessary to include the
// function prototypes generated by the javah tool from the Java source,
//   #include "myjapi_CI.h"
//   #include "myjapi_CI_C0.h"
//   #include "myjapi_CI_C0C.h"
//   #include "myjapi_CI_C1.h"
//   #include "myjapi_CI_C1C.h"
// if they are declared to receive "C" linkage here.
extern "C" {

// ---------------------------------------------------------------------------
// API JNI function stubs
// ---------------------------------------------------------------------------

// A javah bug in JDK 5
//   http://forums.sun.com/thread.jspa?threadID=5115982&tstart=1499
// generates a wrong name for native methods in static nested classes:
//
// JDK 6 has this bug only partially fixed (nested classes as invocation
// targets but not as parameters).
//
// Outer$Inner is to be mangled as unicode escape: Outer_00024Inner, see:
//   http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/design.html#wp615]Resolving%20Native%20Method%20Names

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C0_cc(JNIEnv * env, jclass cls)
{
    TRACE("jobject Java_myjapi_CI_00024C0_cc(JNIEnv *, jclass)");
    return gget< ttrait_myjapi_CI_C0_cpc, C0::cc >(env, cls);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C0_c(JNIEnv * env, jclass cls)
{
    TRACE("jobject Java_myjapi_CI_00024C0_c(JNIEnv *, jclass)");
    return gget< ttrait_myjapi_CI_C0_pc, C0::c >(env, cls);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_print(JNIEnv * env, jobject obj)
{
    TRACE("void Java_myjapi_CI_00024C0_print(JNIEnv *, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C0_ct, &C0::print >(env, obj);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C0_deliver_1C0Cp(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C0_deliver_1C0Cp(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C0_ct, ttrait_myjapi_CI_C0_cp, &C0::deliver_C0Cp >(env, obj);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C0_deliver_1C0Cr(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C0_deliver_1C0Cr(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C0_ct, ttrait_myjapi_CI_C0_cr, &C0::deliver_C0Cr >(env, obj);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_take_1C0Cp(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C0_take_1C0Cp(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C0_ct, ttrait_myjapi_CI_C0_cp, &C0::take_C0Cp >(env, obj, p0);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_take_1C0Cr(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C0_take_1C0Cr(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C0_ct, ttrait_myjapi_CI_C0_cr, &C0::take_C0Cr >(env, obj, p0);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C0_deliver_1C0p(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C0_deliver_1C0p(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C0_t, ttrait_myjapi_CI_C0_p, &C0::deliver_C0p >(env, obj);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C0_deliver_1C0r(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C0_deliver_1C0r(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C0_t, ttrait_myjapi_CI_C0_r, &C0::deliver_C0r >(env, obj);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_take_1C0p(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C0_take_1C0p(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C0_t, ttrait_myjapi_CI_C0_p, &C0::take_C0p >(env, obj, p0);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_take_1C0r(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C0_take_1C0r(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C0_t, ttrait_myjapi_CI_C0_r, &C0::take_C0r >(env, obj, p0);
}

JNIEXPORT jint JNICALL
Java_myjapi_CI_00024C0_deliver_1C0E1(JNIEnv * env, jclass cls)
{
    TRACE("jint Java_myjapi_CI_00024C0_deliver_1C0E1(JNIEnv *, jclass)");
    return gcall_fr< ttrait_C0_C0E_iv, C0::deliver_C0E1 >(env, cls);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_take_1C0E1(JNIEnv * env, jclass cls, jint p0)
{
    TRACE("void Java_myjapi_CI_00024C0_take_1C0E1(JNIEnv *, jclass, jint)");
    gcall_fv< ttrait_C0_C0E_iv, C0::take_C0E1 >(env, cls, p0);
}

JNIEXPORT jint JNICALL
Java_myjapi_CI_00024C0_deliver_1C0E1c(JNIEnv * env, jclass cls)
{
    TRACE("jint Java_myjapi_CI_00024C0_deliver_1C0E1c(JNIEnv *, jclass)");
    return gcall_fr< ttrait_C0_C0E_c_iv, C0::deliver_C0E1c >(env, cls);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C0_take_1C0E1c(JNIEnv * env, jclass cls, jint p0)
{
    TRACE("void Java_myjapi_CI_00024C0_take_1C0E1c(JNIEnv *, jclass, jint)");
    gcall_fv< ttrait_C0_C0E_c_iv, C0::take_C0E1c >(env, cls, p0);
}

// ---------------------------------------------------------------------------

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C1_cc(JNIEnv * env, jclass cls)
{
    TRACE("jobject Java_myjapi_CI_00024C1_cc(JNIEnv *, jclass)");
    return gget< ttrait_myjapi_CI_C1_cpc, C1::cc >(env, cls);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C1_c(JNIEnv * env, jclass cls)
{
    TRACE("jobject Java_myjapi_CI_00024C1_c(JNIEnv *, jclass)");
    return gget< ttrait_myjapi_CI_C1_pc, C1::c >(env, cls);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C1_deliver_1C1Cp(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C1_deliver_1C1Cp(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C1_ct, ttrait_myjapi_CI_C1_cp, &C1::deliver_C1Cp >(env, obj);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C1_deliver_1C1Cr(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C1_deliver_1C1Cr(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C1_ct, ttrait_myjapi_CI_C1_cr, &C1::deliver_C1Cr >(env, obj);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C1_take_1C1Cp(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C1_take_1C1Cp(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C1_ct, ttrait_myjapi_CI_C1_cp, &C1::take_C1Cp >(env, obj, p0);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C1_take_1C1Cr(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C1_take_1C1Cr(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C1_ct, ttrait_myjapi_CI_C1_cr, &C1::take_C1Cr >(env, obj, p0);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C1_deliver_1C1p(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C1_deliver_1C1p(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C1_t, ttrait_myjapi_CI_C1_p, &C1::deliver_C1p >(env, obj);
}

JNIEXPORT jobject JNICALL
Java_myjapi_CI_00024C1_deliver_1C1r(JNIEnv * env, jobject obj) 
{
    TRACE("jobject Java_myjapi_CI_00024C1_deliver_1C1r(JNIEnv *, jobject)");
    return gcall_mfr< ttrait_myjapi_CI_C1_t, ttrait_myjapi_CI_C1_r, &C1::deliver_C1r >(env, obj);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C1_take_1C1p(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C1_take_1C1p(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C1_t, ttrait_myjapi_CI_C1_p, &C1::take_C1p >(env, obj, p0);
}

JNIEXPORT void JNICALL
Java_myjapi_CI_00024C1_take_1C1r(JNIEnv * env, jobject obj, jobject p0) 
{
    TRACE("void Java_myjapi_CI_00024C1_take_1C1r(JNIEnv *, jobject, jobject)");
    gcall_mfv< ttrait_myjapi_CI_C1_t, ttrait_myjapi_CI_C1_r, &C1::take_C1r >(env, obj, p0);
}

// ---------------------------------------------------------------------------

} // extern "C"

#endif // myjapi_CI_hpp
